// Code generated by go-bindata. DO NOT EDIT.
// sources:
// DiscordCanary.lnk (1.923kB)
// pinned_update.json (12.713kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordcanaryLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x68\x2b\x55\x14\xc7\x7f\xf1\x3d\x79\xbe\x5d\xc4\xe0\x17\xef\xd9\x79\x48\xe4\x81\xcc\xe4\xa3\x79\x8f\x24\xa0\xe4\x35\x1f\xa6\x74\x30\x43\x3e\x68\x94\x11\x3b\x26\x03\x19\x69\x92\xe9\x4c\xd2\x0f\xbb\x10\x5d\xb8\x10\x0b\x82\x2e\x5c\x58\x1a\x44\xd1\x85\x2e\xc4\xba\x69\x45\xeb\xc2\xa5\xd2\x45\xab\xa5\x2b\x2b\xe8\x42\xa1\x5d\x08\xba\x51\x90\xb9\x4d\x4a\xd3\x46\xdd\xb8\x51\xfc\x5f\x72\x6f\xee\x3d\xe7\x9e\xff\xff\x9c\x19\xce\xa8\x80\x2f\x70\x1b\x1e\xb6\xc4\x4c\xee\x28\x05\x12\xf0\xfb\x03\x4f\x45\x57\x0b\xfb\xbe\xf5\x5f\x9e\x16\x2b\xfe\x47\x5f\xbd\x7a\x7d\xdf\x77\x6f\xf6\x1e\xe1\xe8\x63\x18\xbf\x12\x60\x4c\xfb\xb6\xb0\x2d\xfd\x98\xb4\xfc\x6f\xed\xdd\xc1\xc3\xe1\xf0\xea\x7d\x84\xd2\x49\x9d\xf3\x68\x10\x11\x6b\xa2\xba\xd5\xf5\x4b\x19\xcb\xad\xb5\x9d\x7a\xda\x68\x19\xce\x12\x2a\x97\xb9\xc8\xd1\xa7\x89\xea\xc7\x5d\xcf\xae\x00\x5f\xa6\x3c\xc2\xd4\x99\x28\xbd\x85\x4b\x64\xb0\x70\xa9\xd1\xc6\xa1\x4e\x1a\x83\x16\x06\x0e\x4b\xc0\x15\x66\x88\xe2\x49\x7e\x69\x9a\xb4\x44\xc5\xae\x1b\x1d\x53\x31\x17\x4d\xc8\x9d\xb0\x6c\x76\xbd\x9f\xc7\xf2\xd3\x9e\x57\x8c\xc0\x08\xbd\x15\x6c\xea\x18\x74\x30\x51\x30\x59\xc4\x04\xee\x17\x16\x8f\xe7\xb8\x20\xde\x1a\xef\xdf\x28\xf7\xf7\x17\x00\xed\xb3\x17\x9f\xf4\x03\x2d\xb3\x2c\xb9\x0b\xed\x7a\xcb\x9a\x26\x9d\xd4\x87\xd2\xd6\x4f\x8b\xbb\x76\x26\x2d\x09\x19\x89\x06\x1d\x3a\xd8\xb8\x24\x09\x11\xa2\x3e\xe4\x63\x60\x63\xa3\x88\x7d\x93\x10\xd7\x50\x50\xd0\x87\xe6\x3f\x2f\x96\x3e\x32\x45\x8f\x57\xc6\xc6\xa1\x4d\x0d\x13\x17\x97\x12\x1d\x71\xa7\x83\xf4\x17\xf1\x06\x11\x42\xa4\x49\x8a\xe8\x2e\x26\x0e\x2e\x3a\x35\x1c\x0c\x9e\x13\xac\xb7\x84\xea\x8c\xe0\x35\xd0\x51\x05\x93\xc1\xec\x39\xb5\x1a\x65\x26\xd0\x4f\xf2\xb4\x84\x25\x70\x01\x2e\x41\x2f\x58\x29\x65\x8b\x5a\xb1\x90\x9b\x54\xb3\x41\xfd\x96\x6d\x67\x8c\x8e\xa1\xab\xed\x9a\x31\x3b\xa8\xb3\x56\x9e\xd0\x0d\xdb\x56\xac\x5a\x7b\xc4\x13\xfe\x0f\x20\x48\x85\x12\x59\x8a\x68\x14\x29\x90\x63\x12\x95\x2c\xc1\x7f\xa0\xce\xff\xe3\xdf\x83\xc7\x7c\x70\x19\x7a\x2b\x40\xa4\xa4\x95\xbe\x7b\xb9\x9a\xfb\x44\x8d\xa7\x37\x7f\xbb\xeb\xb5\x87\xde\x68\x7e\x35\x07\x5c\xf4\x1c\xc7\x80\x10\x50\x42\x26\x82\xcc\x0d\x64\xa2\xe2\xdf\x38\xe3\x84\xb9\xc9\x38\x71\x22\x44\x89\x11\x45\x26\x46\x58\x8c\xb8\xb0\xc4\xb8\x29\x7c\x23\xc4\x88\x13\x25\x4e\x98\xa8\x18\x09\x71\xea\x79\x46\x4e\x44\x75\xfb\x62\x2a\xd7\xd5\xb5\xa5\xb5\xc4\xd4\x7b\xdb\x07\x3b\xf2\xc1\xee\xcf\x4f\x00\xb7\x0f\xc4\x3c\x08\xfd\xfe\xa5\xe0\x32\x47\x17\x0b\x07\x07\x93\x59\x94\x91\xef\xe9\xe8\xd3\x01\x12\x7d\xd2\x0f\xef\x6e\x66\x3e\x58\xb1\xf3\xef\xe6\x53\xca\xdb\x8f\x2c\xbe\x72\x55\x7c\x82\x80\xbc\xd7\xa1\x97\xa7\xf2\xc7\xee\xda\xd8\xe9\x32\xce\x1c\x77\xef\x5e\xb5\xbf\x5f\xb0\x5a\x72\x3b\x32\xdf\xb8\x31\x6f\x3c\xfb\x4c\xa3\x49\xde\x7a\xff\xfb\xec\xee\x95\xec\x9b\xcf\x7f\x71\xf8\x43\xa9\x37\xdf\xfb\xfc\xa3\xaf\x5f\xdf\x38\xbc\x73\xfd\xf1\x9d\x17\xbe\x59\x7e\x67\xe3\xef\xec\x5e\xcc\x3f\x02\x00\x00\xff\xff\x7c\xd1\xbe\x12\x83\x07\x00\x00")

func discordcanaryLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordcanaryLnk,
		"DiscordCanary.lnk",
	)
}

func discordcanaryLnk() (*asset, error) {
	bytes, err := discordcanaryLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DiscordCanary.lnk", size: 1923, mode: os.FileMode(0666), modTime: time.Unix(1709215620, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0xc, 0x3a, 0x83, 0x1a, 0x8f, 0x80, 0xb, 0x96, 0x4d, 0xb4, 0x62, 0x81, 0xaf, 0x3c, 0xdb, 0xc4, 0xdf, 0xab, 0x6a, 0xc6, 0x10, 0xe1, 0xff, 0xd, 0x2a, 0x13, 0xd6, 0xf1, 0x2b, 0x7a, 0xa2}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9b\xdf\x4e\x64\x47\x92\x87\xef\xfb\x29\x10\xd7\xbb\x4d\x44\x66\x44\x66\x84\x5f\x65\x34\xb2\xe2\xaf\x1b\x19\x37\x2c\xd0\xde\xb5\x46\x7e\xf7\x55\xb9\x81\x2e\x50\xdb\x3b\x42\x53\x1a\x96\x3b\xb2\x12\xce\xa9\xfc\xf8\x2a\xce\xef\x64\x9c\xfa\xc7\x87\xb3\xb3\xf3\x5f\xae\xf3\xcb\x55\xdd\x9d\xff\x70\x76\x18\x9e\x9d\x9d\xe7\xe5\x5d\x5c\xdf\xe6\x8f\xbf\x5e\x5f\x46\x3d\xbd\x7c\x76\x76\xde\x5f\xae\xae\x8e\xc6\x67\x67\xe7\x9f\xae\xef\xee\x7f\xfc\xb5\x6e\xef\x2e\xaf\x3f\x9f\xff\x70\xf6\xb7\xa7\x99\xb3\x33\xfc\x8f\xa3\x01\x1c\x0f\x50\xd6\xd3\xe8\xef\xdf\x26\x1e\xde\xc8\xd1\xe1\xf8\x68\xf2\xc6\xe2\x67\xfb\xa9\x7e\xbc\xfb\x64\x83\xd7\xf9\x0f\x67\xe7\x62\x62\x63\xa8\x9b\x6c\x8a\xe8\xc6\xa5\x36\xe7\x30\x33\xe0\x02\x0a\x59\x3b\x72\x10\x08\xb2\x33\xb4\x59\xe6\x82\xf2\xea\xc4\x56\xb2\x79\x7e\x74\xf4\x2f\xb7\x87\x85\x9d\x7f\xba\xbf\xbf\xb9\xfb\xe1\xe2\x22\xaf\xfe\x33\xec\xb3\xdd\xfe\xf6\xf1\x81\x85\xdd\xdc\x7c\xfc\x5c\xf7\x17\x79\x79\x77\x7f\x7b\x7d\x61\x37\x37\x17\x5f\x7f\xe1\xe2\xbf\x2f\x3f\x5f\xfc\x8f\xac\x0b\xfc\x08\x1f\x51\xd6\xc5\x33\x78\x17\x7c\x71\x60\xf6\xf1\xeb\x9f\x9d\x3f\x9c\xef\xf7\xc7\x13\x9f\x67\x5d\xdd\xdb\xdd\x33\x70\xff\x38\x02\xf5\x57\x78\x5f\x00\x7e\x81\xf8\x39\xe4\x67\x98\xbf\x07\x9a\x9e\x4d\x7f\x07\x75\x5a\x25\x8d\x6c\x1a\x6b\xcd\x52\xd8\xb4\x37\x19\x99\x4d\x26\x5f\xc5\x0d\xc5\xbe\xcc\x62\xa6\xe4\x74\x1e\xe0\x7b\x30\x22\x34\xd5\x9e\x75\xfe\xec\xf8\x27\x84\x7d\x7b\xfd\xcb\xd3\x24\x9d\x3f\x9d\xf4\xf7\x87\x9f\xfe\xfe\xe1\x88\xff\x93\xe7\x3f\xdf\x5e\xde\xdd\xfc\x3b\x3d\xa7\xbf\xf4\xbc\x87\x0d\x65\xdb\xa0\x55\x9b\x60\x0f\x40\x85\xe2\xcc\x4a\xde\x25\xb0\x21\x06\xee\xb1\x64\x4b\x40\x77\xa4\x53\x67\xaf\x3d\x3a\xd1\x48\xec\xb4\x9e\xff\x01\xef\x82\xfe\x7f\x78\x3e\xff\x0f\xcf\xbd\x63\xe0\x72\xcc\x8c\x99\x54\x6e\x4b\x4d\x24\x6b\x46\x6e\x4c\xf1\x10\xc4\xd4\xea\x85\x1d\xdb\x7a\x26\xcf\xb1\x7a\x46\xed\xd8\x3c\x60\x9f\xda\xf3\x27\xd8\xc7\x9e\xcf\x7f\xd6\xf3\xbc\xbc\xbb\xb1\xfb\xf8\xf4\x76\x55\xb7\x65\x2b\xa4\x00\x03\xc6\x68\x05\x1f\x05\xdd\x5b\xa6\x05\xe1\xd6\x89\x51\x05\xa6\x1d\x58\x93\x8b\x47\xc0\x54\x28\x42\x0d\x94\xed\xed\xa7\x55\xfd\x91\xdf\x7b\xb1\xbd\x50\x03\x3a\x59\xbb\x83\x80\xcd\x67\x5a\x53\x68\xd4\x98\xce\x10\xa4\x9c\x63\x6a\x82\xb9\x8c\x35\x70\x47\x38\xe6\xb0\x3d\x51\x55\x16\x9f\xda\xf6\x63\xde\xaf\x12\xfe\xd7\xcb\x9f\x2e\xaf\xec\xf3\xfd\xbf\x35\xc4\xfc\xb5\xf1\x9e\xb2\x38\x4c\x27\x56\x98\x25\x52\x65\xa2\x21\x79\xaa\xe3\x22\x8a\x01\xa9\x3a\xd6\x0c\x88\x51\x4b\x3d\x48\x76\xaf\xed\x3c\xda\x32\xeb\xc4\x21\xe6\x11\xe0\x7b\x51\x5e\x6d\xaf\x01\xea\x65\x16\xd9\x66\x21\xea\x93\x67\x1b\x08\xe6\x84\x49\x36\x87\x4d\x63\x6e\x81\xde\x99\xbe\xa6\xee\xbd\x98\xc4\x88\x02\xd6\xc9\x83\xcc\x31\xf0\x57\x39\xff\x32\xcd\xbf\x39\xe3\x23\x3c\x3b\x68\xcc\x21\xce\xad\x13\x37\x02\xb2\x78\x4d\x2b\x23\x65\x70\x71\x9a\xdb\x36\x2d\x0e\x00\x35\x28\x94\xbd\x26\xe6\xee\x1d\xde\xa7\x35\xfe\x01\xdf\x7b\xf1\x7d\xc0\xec\x2a\x51\xc4\x18\x1b\xb3\x66\x0e\x07\x58\x32\x47\x3a\x2d\x1e\xd2\x5c\xb1\x36\x89\xd4\xe2\x9e\x03\x15\xda\xd4\xc1\x15\x63\x48\xd9\xa9\x7d\x3f\xc2\xfd\x2a\xdb\xeb\xf6\xea\xb0\xe8\xb7\x6b\x7b\x13\xce\x89\xd5\xd5\xa5\x0e\x1b\x9d\xda\xe1\x10\x1c\x6b\xac\x8c\x22\xa1\xb9\xa3\xc6\x9e\xc6\xb3\x74\x39\x23\x4e\xf4\x42\x11\x1b\x52\xeb\xc4\xf5\xfd\x01\xdf\x7b\xb1\x5d\x04\xdd\x1a\x69\x63\x68\xab\x0a\xf2\xd2\x6e\x2b\xf5\xde\xb4\x5c\x16\x52\xe2\x68\x2f\x71\x91\x85\x95\x62\xab\x72\xf2\xb6\x20\xe2\x01\xa7\xb6\xfd\x08\xf7\xab\x6c\xbf\xfe\xb5\x6e\xaf\xec\xb7\xf1\x76\x75\xa7\xf0\x3a\x5c\x39\x1b\x69\x52\x66\x8a\xe6\xb0\x54\x1f\x1c\xed\x68\x8a\x34\x96\x91\x59\xa5\x89\x28\xac\xde\x8b\x56\x94\xae\xd5\x36\xb8\xe2\xb4\xba\x3f\xf2\x7b\x2f\xbe\xd7\x98\x3d\x09\x9b\x84\x24\x6a\xb0\x4f\x07\xda\x8e\x46\xc3\xb9\x60\x73\x93\xe4\xdc\x40\xd9\x11\x29\xc8\x3c\x03\x80\xbb\x7b\xdb\xc4\xd3\x57\xf7\x63\xde\xaf\x12\xfe\xd3\xf5\xf5\x1b\xae\xed\x12\x96\xa6\xed\xc5\x1b\x46\x2a\x47\xa8\x0f\x1d\xb8\xa2\x47\xd7\x5e\x00\x58\x87\xfb\xa6\x1c\x12\x39\x04\x37\x65\x27\x40\x73\xa9\xbb\xe1\x89\x6b\xfb\x81\xdd\x7b\x11\xbd\x0b\x52\xe7\x06\xd0\xe5\x52\xea\x8a\xa2\x69\x5d\x38\x88\x36\x67\x98\xab\x0f\x0f\x8e\x25\xa3\xda\x7c\x30\xa5\x65\x6f\xd6\xe0\x15\x88\xa7\x16\xfd\x91\xf5\xeb\x12\x7b\xe5\xa5\xbd\x5d\xcb\x5d\xac\x7c\x51\x44\x8d\x5e\x39\x22\xa7\x77\xac\xa1\xe5\xa1\x50\x66\xb9\xda\xcc\xaa\x46\x4c\x92\x91\xb4\x2d\x72\x97\xf4\x8e\x84\x5c\xcf\x2e\xaa\xa7\x08\x90\x07\x78\xef\x45\x73\x59\xc6\x3c\x17\x14\xe8\x48\xc0\x22\x4e\x8c\xa4\x85\xb6\x77\x35\xb2\x2b\x6b\x19\xd1\x4c\xaa\xf6\x99\x55\x73\xa2\x65\xb0\x58\x8b\xaf\x93\x6b\xfe\x04\xfb\x55\x9e\xdf\xd5\xcf\xb7\x97\xf7\x6f\x57\xf4\x79\x28\xcf\xc4\x25\xbc\xc3\x65\x1b\x96\x4f\x2b\x58\xd3\x45\xb4\x3a\xa6\x58\x77\x4c\xf4\xb1\xb7\x2e\x6f\x1b\xba\xbd\x1c\xd6\xc8\x89\x4b\xf6\x69\x45\xff\x4a\xef\xdd\x98\x0e\x2a\x41\xc3\x60\x43\xbb\x2d\x4e\x88\x55\xec\x4b\x9c\xd9\x74\xbb\x3b\x0c\xe9\x4d\x48\x4b\x68\x2c\x74\x9b\xb9\xe7\x50\xcb\x61\xae\xa7\xdf\x7a\xfc\x46\xfb\x55\xaa\x7f\xb9\xbf\xbc\x7a\xc3\x5b\x30\x0c\x87\xca\x31\x88\xad\x92\xc7\x5c\xcb\x6d\x4c\xe8\x89\x0c\x4e\x13\x18\x10\x61\x72\xb0\xb0\x57\x03\xee\xea\x55\x16\x4b\x9a\xf0\x8f\x2d\xb2\xd3\x9a\xfe\x07\xbc\xf7\x22\xba\x72\x66\x46\x0f\x02\xcf\x79\x48\x30\x22\x4c\xdc\x5b\x37\x83\x77\xfb\x4a\x41\x18\x23\x43\x47\x2c\x13\x9c\x23\x08\x59\x64\x23\xca\xdc\x70\xf2\xce\xe9\x13\xec\x57\x79\x7e\x7b\x13\x6f\xd7\xf2\xb9\x40\x10\xbd\x80\x18\x27\xee\x92\x44\x8d\x49\x6b\x7b\x49\x55\xed\x00\xf5\xbd\xb5\x7c\xe6\xac\xca\x5a\x5e\xba\x09\x74\xd9\x6c\x8c\x75\xe2\x66\xd2\xed\x4d\xbc\x17\xc7\x79\xd3\xa0\x4a\x23\x6d\xcc\x4c\x45\x28\x36\x3b\x24\x71\x44\x75\xec\xd4\xd5\xd8\x35\x18\x0c\x64\x83\x82\x4a\xad\x16\x4e\x86\x2e\x93\x3e\xb5\xe3\x0f\xa8\x5f\xd7\x33\xad\xbb\x9f\xef\xaf\x6f\x7e\x8c\xeb\xdb\x37\xdc\x45\x82\xd1\xa6\x83\xf7\x20\x49\x13\xad\xe0\x39\xf7\x46\xdd\x2b\x51\x53\x0a\x77\x41\x63\xb9\x4e\x74\xb6\x58\xe6\xbd\x0c\x76\xf3\x24\xa9\xe6\x13\x67\xf4\x63\x86\xef\xc5\x79\x6d\x40\x77\x03\x5c\xec\xe1\xc0\xd1\x30\xcd\x4a\x45\x3d\x17\x15\x4d\x48\xa4\xb9\xbb\x37\xd0\xf2\xb2\xc1\xb4\xab\x08\x62\x22\xad\x31\xc7\xc9\x7b\xa7\x2f\x98\xbf\x4a\xfe\x9f\xec\x97\x7a\xeb\x59\x46\xc3\x97\x4b\x89\x3b\x31\x0d\x87\xe1\x3a\x01\x6d\x14\xe6\x9a\x92\x1d\x18\x63\xcd\xc1\x3a\x40\x9d\x09\x74\xe8\x20\xc8\xdc\x09\x34\x63\x9e\xb8\x9d\xf4\x8d\xe0\x7b\x11\x7f\x73\x64\x6c\x5a\xbe\x72\x20\xb3\x6f\xdb\xa8\xb0\x47\xed\x5d\x87\x88\x93\x4b\x82\x7a\xee\xc6\x74\x47\x97\x51\x9c\xac\x2d\x5a\xc2\x34\x74\x9e\x5a\xfc\xe7\xc4\x5f\xa5\x7d\x5c\x5d\x7f\xc9\xbb\xdf\x3e\xbf\xe1\x6c\xb3\x16\x8c\x92\x56\xe1\xd4\xb5\x89\x60\x7b\xb0\xf9\x92\x65\x16\x8b\xb2\xaa\x96\x2f\x60\x93\x69\x23\x13\x9c\x61\x06\x6d\x0d\x62\x87\x48\x3e\xad\xf5\x4f\x00\xdf\x8b\xf4\xa4\x44\x52\x5b\x68\x49\xac\x98\x89\x4e\x8b\xc8\x0b\xc4\x26\xc4\x4e\xf2\x1c\x65\xdb\x24\x9a\x66\x2c\xc2\xa9\x73\x78\x09\x8d\xa1\x53\x9f\x3d\x97\x74\x7a\xe0\xaf\xdb\x9c\xb9\xa9\xab\xab\xf8\x54\x6f\xba\x97\xda\x3e\xb5\x89\xd5\x76\xee\x5c\xcb\x34\x6b\x82\x36\x1a\xba\x77\x32\xc8\xc8\xa4\xa0\x45\x03\x66\xb0\xa5\x88\xd4\xdc\xa9\x4b\x97\x36\x9e\x58\xfa\x6f\x04\xdf\x8b\xf5\xcb\x69\x09\x9b\x19\x8a\x8f\x51\x85\x40\x98\x24\x66\x46\xb2\x88\x0d\x2a\x43\x65\x17\xdb\x90\x54\x50\x0a\x74\xd4\x28\x2c\xe5\xd0\x7d\xf2\xf6\xd2\x73\xe2\xff\x9c\xf6\x1f\x1e\xfe\x11\xcf\xd5\xfe\x33\xe4\x4f\xb0\x9f\x30\x3f\x02\x7e\x40\xfb\x3d\x6a\x10\x86\xab\x58\x74\x7a\x42\x96\xab\x8f\xe9\xd4\x3c\x24\x96\x59\xed\x0a\xa2\xc9\x66\x9b\x55\x76\xae\xa2\x81\xa2\xdb\x64\xa6\x3b\x8f\x47\x6a\xff\x42\x5e\x2f\x64\xfc\xba\xfe\x17\x12\x3e\x7d\xe4\xff\x54\xbe\x23\xf1\x8e\xa4\x43\xe1\x0f\x2f\x64\xfb\xde\x27\x37\x35\x57\x55\x28\x36\xcb\xf4\x91\x93\xa8\xc9\xd2\xa8\xa9\x99\x1c\xd8\xa0\x9b\x02\x31\x25\xe8\x70\x7f\x48\x34\x5b\x5a\xaa\xa0\x02\xbe\xa5\xe5\x7f\x25\x95\x6f\xc2\xf0\xf9\x93\x1c\x7f\xac\xe2\xfc\xb6\xfe\xeb\xcb\xe5\x6d\x1d\x3f\x4d\xf5\xb7\xbf\xb8\x2f\x7c\x51\x4b\x1f\x1f\x4a\xf9\xf3\x12\xfb\xdd\xed\xc2\x17\x2f\x7e\xfd\xf6\xc5\xe1\x2d\x7d\xf8\xfd\xc3\xff\x06\x00\x00\xff\xff\xd8\x36\x64\x3f\xa9\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12713, mode: os.FileMode(0666), modTime: time.Unix(1709731880, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x9, 0xaa, 0x9, 0x22, 0xd4, 0xf2, 0xb6, 0x6, 0x8b, 0x2a, 0x7b, 0x90, 0xa7, 0x94, 0xdd, 0xa8, 0x32, 0x31, 0x6a, 0x27, 0x5d, 0xb1, 0xcc, 0xc6, 0x69, 0x51, 0xa4, 0xe6, 0x9a, 0xc7, 0xa0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DiscordCanary.lnk":  discordcanaryLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DiscordCanary.lnk": {discordcanaryLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
