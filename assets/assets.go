// Code generated by go-bindata. DO NOT EDIT.
// sources:
// DiscordCanary.lnk (1.923kB)
// pinned_update.json (12.713kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordcanaryLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x68\x2b\x55\x14\xc7\x7f\xf1\x3d\x79\xbe\x5d\xc4\xe0\x17\xef\xd9\x79\x48\xe4\x81\xcc\xe4\xa3\x79\x8f\x24\xa0\xe4\x35\x1f\xa6\x74\x30\x43\x3e\x68\x94\x11\x3b\x26\x03\x19\x69\x92\xe9\x4c\xd2\x0f\xbb\x10\x5d\xb8\x10\x0b\x82\x2e\x5c\x58\x1a\x44\xd1\x85\x2e\xc4\xba\x69\x45\xeb\xc2\xa5\xd2\x45\xab\xa5\x2b\x2b\xe8\x42\xa1\x5d\x08\xba\x51\x90\xb9\x4d\x4a\xd3\x46\xdd\xb8\x51\xfc\x5f\x72\x6f\xee\x3d\xe7\x9e\xff\xff\x9c\x19\xce\xa8\x80\x2f\x70\x1b\x1e\xb6\xc4\x4c\xee\x28\x05\x12\xf0\xfb\x03\x4f\x45\x57\x0b\xfb\xbe\xf5\x5f\x9e\x16\x2b\xfe\x47\x5f\xbd\x7a\x7d\xdf\x77\x6f\xf6\x1e\xe1\xe8\x63\x18\xbf\x12\x60\x4c\xfb\xb6\xb0\x2d\xfd\x98\xb4\xfc\x6f\xed\xdd\xc1\xc3\xe1\xf0\xea\x7d\x84\xd2\x49\x9d\xf3\x68\x10\x11\x6b\xa2\xba\xd5\xf5\x4b\x19\xcb\xad\xb5\x9d\x7a\xda\x68\x19\xce\x12\x2a\x97\xb9\xc8\xd1\xa7\x89\xea\xc7\x5d\xcf\xae\x00\x5f\xa6\x3c\xc2\xd4\x99\x28\xbd\x85\x4b\x64\xb0\x70\xa9\xd1\xc6\xa1\x4e\x1a\x83\x16\x06\x0e\x4b\xc0\x15\x66\x88\xe2\x49\x7e\x69\x9a\xb4\x44\xc5\xae\x1b\x1d\x53\x31\x17\x4d\xc8\x9d\xb0\x6c\x76\xbd\x9f\xc7\xf2\xd3\x9e\x57\x8c\xc0\x08\xbd\x15\x6c\xea\x18\x74\x30\x51\x30\x59\xc4\x04\xee\x17\x16\x8f\xe7\xb8\x20\xde\x1a\xef\xdf\x28\xf7\xf7\x17\x00\xed\xb3\x17\x9f\xf4\x03\x2d\xb3\x2c\xb9\x0b\xed\x7a\xcb\x9a\x26\x9d\xd4\x87\xd2\xd6\x4f\x8b\xbb\x76\x26\x2d\x09\x19\x89\x06\x1d\x3a\xd8\xb8\x24\x09\x11\xa2\x3e\xe4\x63\x60\x63\xa3\x88\x7d\x93\x10\xd7\x50\x50\xd0\x87\xe6\x3f\x2f\x96\x3e\x32\x45\x8f\x57\xc6\xc6\xa1\x4d\x0d\x13\x17\x97\x12\x1d\x71\xa7\x83\xf4\x17\xf1\x06\x11\x42\xa4\x49\x8a\xe8\x2e\x26\x0e\x2e\x3a\x35\x1c\x0c\x9e\x13\xac\xb7\x84\xea\x8c\xe0\x35\xd0\x51\x05\x93\xc1\xec\x39\xb5\x1a\x65\x26\xd0\x4f\xf2\xb4\x84\x25\x70\x01\x2e\x41\x2f\x58\x29\x65\x8b\x5a\xb1\x90\x9b\x54\xb3\x41\xfd\x96\x6d\x67\x8c\x8e\xa1\xab\xed\x9a\x31\x3b\xa8\xb3\x56\x9e\xd0\x0d\xdb\x56\xac\x5a\x7b\xc4\x13\xfe\x0f\x20\x48\x85\x12\x59\x8a\x68\x14\x29\x90\x63\x12\x95\x2c\xc1\x7f\xa0\xce\xff\xe3\xdf\x83\xc7\x7c\x70\x19\x7a\x2b\x40\xa4\xa4\x95\xbe\x7b\xb9\x9a\xfb\x44\x8d\xa7\x37\x7f\xbb\xeb\xb5\x87\xde\x68\x7e\x35\x07\x5c\xf4\x1c\xc7\x80\x10\x50\x42\x26\x82\xcc\x0d\x64\xa2\xe2\xdf\x38\xe3\x84\xb9\xc9\x38\x71\x22\x44\x89\x11\x45\x26\x46\x58\x8c\xb8\xb0\xc4\xb8\x29\x7c\x23\xc4\x88\x13\x25\x4e\x98\xa8\x18\x09\x71\xea\x79\x46\x4e\x44\x75\xfb\x62\x2a\xd7\xd5\xb5\xa5\xb5\xc4\xd4\x7b\xdb\x07\x3b\xf2\xc1\xee\xcf\x4f\x00\xb7\x0f\xc4\x3c\x08\xfd\xfe\xa5\xe0\x32\x47\x17\x0b\x07\x07\x93\x59\x94\x91\xef\xe9\xe8\xd3\x01\x12\x7d\xd2\x0f\xef\x6e\x66\x3e\x58\xb1\xf3\xef\xe6\x53\xca\xdb\x8f\x2c\xbe\x72\x55\x7c\x82\x80\xbc\xd7\xa1\x97\xa7\xf2\xc7\xee\xda\xd8\xe9\x32\xce\x1c\x77\xef\x5e\xb5\xbf\x5f\xb0\x5a\x72\x3b\x32\xdf\xb8\x31\x6f\x3c\xfb\x4c\xa3\x49\xde\x7a\xff\xfb\xec\xee\x95\xec\x9b\xcf\x7f\x71\xf8\x43\xa9\x37\xdf\xfb\xfc\xa3\xaf\x5f\xdf\x38\xbc\x73\xfd\xf1\x9d\x17\xbe\x59\x7e\x67\xe3\xef\xec\x5e\xcc\x3f\x02\x00\x00\xff\xff\x7c\xd1\xbe\x12\x83\x07\x00\x00")

func discordcanaryLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordcanaryLnk,
		"DiscordCanary.lnk",
	)
}

func discordcanaryLnk() (*asset, error) {
	bytes, err := discordcanaryLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DiscordCanary.lnk", size: 1923, mode: os.FileMode(0666), modTime: time.Unix(1709215620, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0xc, 0x3a, 0x83, 0x1a, 0x8f, 0x80, 0xb, 0x96, 0x4d, 0xb4, 0x62, 0x81, 0xaf, 0x3c, 0xdb, 0xc4, 0xdf, 0xab, 0x6a, 0xc6, 0x10, 0xe1, 0xff, 0xd, 0x2a, 0x13, 0xd6, 0xf1, 0x2b, 0x7a, 0xa2}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9b\xdd\x6e\x1d\x47\x8e\x80\xef\xfd\x14\xc2\xb9\xde\xb5\x48\x56\xb1\x58\xcc\xab\x0c\x82\x80\xbf\xb1\x60\xc5\xd2\x4a\x72\x76\x83\x41\xde\x7d\x71\xfc\x23\x1f\x6b\x92\x99\x81\x30\x07\x50\x74\xa7\x42\xb5\xaa\xbb\xbe\xfe\x9a\xcd\xa6\xa8\xbf\xbf\xb9\xb8\x38\xfc\x72\x93\x1f\xaf\xeb\xfe\xf0\xc3\xc5\x71\x78\x71\x71\xc8\xab\xfb\xb8\xb9\xcb\x9f\x9e\x4e\x5c\x5c\x1c\xfa\xe3\xf5\xf5\xc9\xf8\xe2\xe2\xf0\xee\xe6\xfe\xe1\xa7\x5f\xeb\xee\xfe\xea\xe6\xc3\xe1\x87\x8b\xbf\x3d\xce\x5c\x5c\xe0\x7f\x9d\x0c\xe0\x74\x80\x0a\x8f\xa3\x1f\xbf\x4d\x7c\xb9\x94\x93\xe5\x4e\x96\x38\xdc\x5a\xbc\xb7\x9f\xeb\xa7\xfb\x77\x46\xbc\x0e\x3f\x5c\x1c\x60\xce\x85\x39\x7d\xcc\x16\x5d\x11\xe4\xdc\x3e\x0d\xd4\x86\xea\xea\x29\x64\x6b\x4e\x58\x1b\x7c\xb0\x33\x0a\x93\x72\xab\xed\x2d\xbb\x6a\xea\xe1\x64\xf5\x8f\x77\xc7\x8d\x1d\xde\x3d\x3c\xdc\xde\xff\x70\x79\x99\xd7\xff\x1d\xf6\xc1\xee\x7e\x7b\xfb\x85\x86\xdd\xde\xbe\xfd\x50\x0f\x97\x79\x75\xff\x70\x77\x73\x69\xb7\xb7\x97\x9f\x0f\xb8\xfc\xdf\xab\x0f\x97\xff\xb7\xd7\x25\xbe\x85\xb7\xa8\x70\xf9\x04\xdf\x25\x5e\x1e\xa9\xbd\xfd\xfc\x8b\x87\x2f\x67\xfc\xfd\xeb\xa9\x0f\x59\xd7\x0f\x76\xff\x1d\xba\xbf\x9f\xa0\xfa\x67\x80\x9f\x20\x7e\x02\xf9\xe2\x02\xb7\x9e\x8c\x7f\x3c\x9d\xfc\x47\xd4\xf4\xdd\xf4\x3f\xc2\xee\x35\x52\xcb\x56\xf8\x9a\xb0\x57\xb9\x2d\x64\xdf\x93\xad\x76\xc0\xb6\x2a\x40\x4e\x27\x14\x76\xc9\xe4\x5e\x98\x1c\x13\x3c\x72\xed\x42\x38\x7c\xb7\xfe\x59\x71\xdf\xdd\xfc\xf2\x79\x7a\xeb\x25\x1d\x1e\x4f\xfb\xfb\x97\x9f\x7e\x7c\x73\x72\x07\x1e\x6d\xbf\xf9\xb5\xee\xae\xed\x37\x7a\xc1\xba\xc7\x86\x1d\x54\x2e\x40\xbc\x21\x34\x81\x66\x05\xcc\x6c\xe7\xea\xaa\x9a\x5c\x63\xd7\x60\x2a\x69\xdd\x63\x34\xaa\xcc\x32\x9e\xe0\x4d\x74\x5e\xdd\xbf\xf2\x7b\x2d\xbe\xd7\x0c\x16\x5c\x18\x38\xbc\x97\xad\x6d\x3b\xd3\xc6\x50\x92\x52\xb3\x3d\xa8\x3d\x0c\xcb\x6d\x26\x24\x44\xed\x89\x52\x63\x10\x42\x5b\x8e\xb3\xfb\x7e\xca\xfb\x59\xc2\xe7\xd5\xfd\xad\x3d\xc4\xbb\x97\x2b\x3c\x05\xb5\xcf\xe6\x23\xf3\x01\x58\x18\xe5\x5e\x7a\xe4\x1e\x61\x5a\x3d\x57\xeb\x68\x0c\x18\xb1\x14\x8a\x92\x01\x11\x66\x69\x5b\x97\x9c\x39\xbe\x7f\xe5\xf7\x5a\x84\x6f\x84\x0c\x59\x93\x1b\xad\x40\xc9\x0a\xa1\x44\xd4\x94\xbb\x50\x7a\x0c\xc5\x92\xb2\x39\xb1\x4b\x06\x1a\x2e\x94\x3d\xd6\x1c\x2b\x58\xe6\x3e\xb7\xf0\xa7\xbc\x9f\x25\xfc\xfd\x6d\x5d\x5f\xc7\xbb\x8a\xf7\x2f\x58\x79\x61\x33\x5d\x23\x7d\x77\x81\x58\x61\x66\x35\x84\x5b\x3a\x6c\xda\x85\xaa\x9b\x68\x68\xb2\xd4\xe0\x48\x2d\xce\x9a\x28\x6b\x47\x13\xac\xf3\x2a\xff\x8d\xe0\x6b\x91\x7e\x6b\xa7\x24\x8e\xbd\x56\xa5\xf6\xae\x51\xcb\x28\x36\x2f\x59\xb5\x5d\x5a\xd3\x57\x83\x0f\x44\x9f\x42\x01\x03\xf6\x44\xc5\x9c\xe8\x0e\xc0\xe7\x96\xfe\x7b\xe2\xcf\xd2\xfe\xdd\xcd\xcd\x0b\x16\x5e\xe7\x42\xd6\x15\xc0\x22\x20\x59\x8a\x03\x7c\xc8\x9a\x0d\x0c\xba\x2d\xb0\x86\xec\xc5\xca\x83\x9b\x30\xc0\x25\x96\xac\xc4\x01\xcd\xcc\x67\x16\xfe\xc8\xee\xb5\xa8\xde\xd3\x6d\x57\x55\xc5\xc4\xe2\xcd\x61\x96\x6b\xe0\x2c\x26\x02\x84\x85\x7c\x7c\xa7\x1e\x13\xc7\xbd\xe6\x8c\x98\xe2\x96\xd3\x16\x47\x39\x32\x9f\x5d\xf5\xaf\xac\x9f\x25\xf9\xaf\x37\x57\x51\x2f\xd7\x72\x4f\x0a\xf5\x8e\x39\x27\xea\xd8\x23\x49\xa4\xd8\xdd\xa2\x26\x35\x52\x4a\x4a\xda\xb4\xe5\x1a\xa0\xdd\x7b\x4b\xc2\xc2\xac\xad\x6b\xca\xf4\xf3\x5a\xfe\x09\xde\x5f\x45\xf3\xf9\x2f\x34\x57\xe3\xdc\x48\x64\xb3\x7a\x9b\x02\x67\x5a\x57\x94\x34\xb6\x55\x07\xec\x1c\xba\x83\x10\xdb\xa0\xb9\xa7\x19\x87\xce\x5a\x1b\x99\xf5\xfc\x79\xfb\x23\xec\x53\xcf\xe7\xbf\xeb\xf9\xdd\x6d\xbc\x5c\xcb\x69\xce\xb1\xb7\x2a\x0c\x5c\x23\x08\x9d\x70\x6f\x50\x64\x73\x9c\x19\x58\x56\x21\xce\x13\x74\x2f\xc6\x32\x81\x6c\xb0\x32\x5c\x0a\xec\x38\xcf\x6b\xf9\xdd\x6d\xfc\x55\x1c\xff\x57\xa1\x1c\x16\x48\xaa\x70\x6b\xca\xf2\x56\x87\xcd\xe6\x21\x36\x2a\xcc\x73\xa4\x1a\xa4\x92\x8b\x8e\xc9\x36\x59\x42\xaa\x6d\xcd\xed\x2e\x2a\x2a\xe7\x76\xfc\x0b\xea\x67\x45\xf2\x8f\x0f\x57\xd7\x2f\xb8\xe6\x38\xd2\x0b\x2b\x16\xf4\x9e\x3d\xc5\x29\xc3\x58\xa1\xb2\x95\xf7\x08\x63\x50\x29\xa9\x4c\x01\x9f\x13\x9c\x8b\xa7\x92\x64\xea\x9a\xc1\x72\xe6\x22\xcc\x27\x78\xaf\xc5\xf2\x8d\x98\xea\x52\x54\xbb\x51\xa6\xb6\x41\x49\x8d\x98\x09\x12\xbe\x76\xa9\xd4\x44\x5c\x6b\xba\x40\x8f\x00\x82\x0d\x0d\xdc\x09\xd5\x63\xe6\xb9\x2d\x7f\x84\xfd\x2c\xcf\xe3\xfa\xe6\x63\xde\xff\xf6\xe1\x25\xc7\x73\xda\xcb\x96\xea\x72\x58\x48\x63\xcc\xb1\x57\x65\xcd\x4d\xbe\x36\x6d\x72\xa7\x51\x9f\x2a\x90\x70\x8c\x3c\x25\x31\xbd\x32\x83\x9d\xf6\x18\x38\xce\xeb\xfa\x23\xc0\xd7\xe2\x3b\x35\x75\x2d\x1c\xb4\x57\x11\x4d\x9c\x2c\x39\x86\x20\xcd\xa5\x4d\x6b\x91\x28\x42\x2f\x01\x5f\xde\xc7\x2f\x50\xdb\x82\x56\xc9\xcb\x89\x29\xf4\xdc\xbe\x7f\x07\xfc\x59\xce\xd7\xdd\xf5\x71\xdb\x2f\xd7\x78\x5e\x9e\x13\x65\x0a\x92\x70\x40\xae\xae\x40\x69\x43\x98\x01\x64\xb8\x03\x8b\xb2\x30\xd9\x7a\x51\x47\x14\x85\x42\x90\xb2\x47\xb4\xcb\x79\x8d\xff\x82\xef\xb5\xf8\xee\xb9\x81\x99\x54\x46\x0d\x49\x1c\x95\x64\x44\x16\xdb\x11\x86\x2f\x26\x49\x08\x1b\x86\xb1\x71\xeb\x22\x77\x9b\xe5\xd4\x64\x55\x68\xe7\xf7\xfd\x04\xf7\xb3\x6c\x7f\x7f\x77\x75\x7f\xfb\x72\x5d\x47\xa8\x01\x12\x54\xc8\x04\x54\xb8\x2d\x10\x20\x4a\x6d\x22\x13\xb6\x25\x49\xe9\xa8\x35\xa6\x83\xe3\xa4\xda\xb2\x75\xb7\x87\x93\x56\xc7\x79\x5d\xff\x04\xef\xb5\x98\xde\x80\x40\x41\x46\x46\xba\x76\xa2\xf2\x12\xc2\x65\x6e\x4d\xb1\x2d\xcb\xa7\xbb\x71\x6f\xab\x2a\xb6\x2a\x07\xcb\x02\xd2\x02\x2f\xad\xb3\x9b\xfe\x08\xfb\x59\x9e\xff\x52\x79\x65\x2f\xd7\xf3\xde\x4e\x10\x06\x90\x06\x24\x6b\xd4\xec\x95\xa6\x1d\xb6\x1c\x02\x3c\x72\x4f\xef\x88\xd5\x13\x37\x80\x69\x0d\xd5\xde\x8a\x35\xeb\x18\xf8\xcf\xdc\x25\x70\x84\xf7\x5a\x3c\x8f\xf6\x31\x02\x6d\xd5\xe2\x39\xf6\x8e\xca\xda\x2b\x7a\x54\x40\x60\xc6\xdc\xe8\xa6\x98\xd4\xd8\x29\x6d\x45\x00\xbe\xe6\x80\xe0\xe1\xb4\xfa\xec\x3d\x02\x5f\x61\x3f\xcb\xf3\x9f\xed\x97\x7a\xe9\x9f\xa7\xd9\xc3\x52\x68\x3b\x63\x57\xea\xce\x46\xe6\x98\x15\x1b\x29\x12\x44\x20\x34\xd7\x48\xe0\x7d\x0c\xfe\xae\x35\x51\x8f\x37\xaa\xe6\x48\x5a\x75\x5e\xd9\xbf\x11\x7c\x2d\xc6\xf3\x1a\xda\xc6\x99\x8d\xd9\xb9\x42\x54\x05\xe6\x18\x6e\xc5\x18\x8b\x40\x35\x86\xcd\x15\xe0\x7d\x3c\x12\x59\x40\x61\x1f\x93\x1a\x5f\x28\x67\x8f\xec\xdf\x13\x7f\x5e\x69\xfd\xea\xe7\xab\x6b\xfb\xf0\xf0\x82\xcb\xeb\x9c\xe8\xb1\x1a\x68\x16\xc2\x60\x19\x69\x88\x4b\x63\xc3\x90\xbd\x96\x17\x4c\xdd\x2c\x6a\x78\xcc\xed\x5d\x90\x14\x99\x08\x65\xe5\xae\x6a\x3b\x73\x79\xfd\x2b\xc0\xd7\x22\xbd\x26\x8f\x68\xd7\xd9\x5a\x44\x0a\x18\xce\x23\xe7\x14\xf5\x45\xea\x2a\xbc\xf7\x9e\xd8\x61\xdb\x95\x7b\x65\xb2\xf4\xc8\x5d\x36\xa9\x1b\xcf\x2e\xfd\x77\xc0\x9f\xd7\x2a\x50\xef\xef\xae\x1e\x5e\xae\xf0\x73\xd3\xda\xbe\xa0\xb2\xdc\x67\x0f\xe6\x24\xf2\x39\xa2\xa8\x9a\x66\xd0\xf6\x02\x1e\xc9\x4b\x6b\x29\xc7\xf2\xc4\x9e\xe8\x63\x1b\xa9\x78\x9e\xb9\x4d\xe0\x13\xbd\xd7\x62\x3b\x4b\xe0\x31\x41\x97\x0a\x85\xc9\xac\xc1\x86\x92\x3a\xa1\x7a\x2c\x88\x41\xa3\xe2\xf8\x20\x24\x66\xea\x46\xcd\xc4\x68\x2d\x4e\x4d\xe6\xc2\xb3\xb7\x08\x3c\xd2\x7e\x5e\x1b\x58\xdd\xbf\x7f\xb8\xb9\xfd\x29\x6e\xee\x5e\x70\x84\xc7\x60\xc6\x6a\x19\x5a\x31\x49\x66\xb6\xb1\x1e\x63\x4a\xac\xb1\x91\x68\xf3\x54\xcc\xd9\x8d\xe8\x4b\x52\x4a\x33\xd6\x44\x51\x8c\x6e\xb0\x33\x17\x66\x4e\x19\xbe\x16\xed\x07\x0b\xd4\x26\xb7\x58\xa1\xae\x38\x64\x18\x4d\xe1\xdc\x63\x10\xe4\x9a\x49\x50\x52\xa5\x05\x0b\xb0\x44\x47\xb2\x38\xb1\xcf\x95\xdc\xe7\xcf\x6c\x9e\x32\xff\xf7\xe4\x7f\xf3\xe5\x56\x7c\xaf\xf7\x9f\x41\x7f\xc4\xfd\x08\xfa\xab\xce\x5f\xe0\xfe\xd1\xcb\x11\xd7\x6e\x96\xc5\xda\xda\x28\x1a\xaa\x56\x3b\x67\x65\x97\xd7\x66\x6a\xdf\x73\xed\xd1\xc9\xc7\xc0\x4c\x5d\xa6\xac\x36\xda\x65\xe8\xd6\xaf\x65\x95\xff\x20\xb1\x27\x3a\x7e\xde\xff\x13\x0d\x1f\x1f\xfb\x3f\xd5\xef\x44\xbd\x13\xed\xbe\x29\xf7\xa8\xdb\x1f\x55\xb6\x13\x6d\x4e\x92\x00\xec\x41\xcd\x3b\x65\x05\xf0\xe7\x3e\x2a\xf0\x2a\x4e\xf3\xa1\xed\xab\x41\x55\x17\xa7\x8f\x80\x29\x41\xbe\x05\xc6\xb7\xd7\xd5\x7f\x92\xca\x89\x30\x87\x47\x39\x3e\xed\xe2\x70\x57\xff\xf3\xf1\xea\xae\x4e\xff\x05\xe2\x6f\xff\x24\x6a\xfe\x49\x95\xfb\x69\x4e\xf1\xad\xfd\xf0\x0f\xff\xe4\xf9\x34\xed\xfe\xd4\xd1\x72\xbc\xa4\x37\xbf\xbf\xf9\xff\x00\x00\x00\xff\xff\x58\x86\x2c\x0f\xa9\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12713, mode: os.FileMode(0666), modTime: time.Unix(1709902559, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x6a, 0x10, 0x0, 0x62, 0xfe, 0x32, 0xba, 0x32, 0xb9, 0xdf, 0xe2, 0xf5, 0x98, 0x8f, 0x98, 0xc5, 0x62, 0xb9, 0x4d, 0x40, 0x2b, 0xdc, 0xc2, 0x25, 0xcc, 0xc9, 0x40, 0x1, 0xff, 0x4d, 0x30}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DiscordCanary.lnk":  discordcanaryLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DiscordCanary.lnk": {discordcanaryLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
