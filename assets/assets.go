// Code generated by go-bindata. DO NOT EDIT.
// sources:
// DiscordCanary.lnk (1.923kB)
// pinned_update.json (12.713kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordcanaryLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x68\x2b\x55\x14\xc7\x7f\xf1\x3d\x79\xbe\x5d\xc4\xe0\x17\xef\xd9\x79\x48\xe4\x81\xcc\xe4\xa3\x79\x8f\x24\xa0\xe4\x35\x1f\xa6\x74\x30\x43\x3e\x68\x94\x11\x3b\x26\x03\x19\x69\x92\xe9\x4c\xd2\x0f\xbb\x10\x5d\xb8\x10\x0b\x82\x2e\x5c\x58\x1a\x44\xd1\x85\x2e\xc4\xba\x69\x45\xeb\xc2\xa5\xd2\x45\xab\xa5\x2b\x2b\xe8\x42\xa1\x5d\x08\xba\x51\x90\xb9\x4d\x4a\xd3\x46\xdd\xb8\x51\xfc\x5f\x72\x6f\xee\x3d\xe7\x9e\xff\xff\x9c\x19\xce\xa8\x80\x2f\x70\x1b\x1e\xb6\xc4\x4c\xee\x28\x05\x12\xf0\xfb\x03\x4f\x45\x57\x0b\xfb\xbe\xf5\x5f\x9e\x16\x2b\xfe\x47\x5f\xbd\x7a\x7d\xdf\x77\x6f\xf6\x1e\xe1\xe8\x63\x18\xbf\x12\x60\x4c\xfb\xb6\xb0\x2d\xfd\x98\xb4\xfc\x6f\xed\xdd\xc1\xc3\xe1\xf0\xea\x7d\x84\xd2\x49\x9d\xf3\x68\x10\x11\x6b\xa2\xba\xd5\xf5\x4b\x19\xcb\xad\xb5\x9d\x7a\xda\x68\x19\xce\x12\x2a\x97\xb9\xc8\xd1\xa7\x89\xea\xc7\x5d\xcf\xae\x00\x5f\xa6\x3c\xc2\xd4\x99\x28\xbd\x85\x4b\x64\xb0\x70\xa9\xd1\xc6\xa1\x4e\x1a\x83\x16\x06\x0e\x4b\xc0\x15\x66\x88\xe2\x49\x7e\x69\x9a\xb4\x44\xc5\xae\x1b\x1d\x53\x31\x17\x4d\xc8\x9d\xb0\x6c\x76\xbd\x9f\xc7\xf2\xd3\x9e\x57\x8c\xc0\x08\xbd\x15\x6c\xea\x18\x74\x30\x51\x30\x59\xc4\x04\xee\x17\x16\x8f\xe7\xb8\x20\xde\x1a\xef\xdf\x28\xf7\xf7\x17\x00\xed\xb3\x17\x9f\xf4\x03\x2d\xb3\x2c\xb9\x0b\xed\x7a\xcb\x9a\x26\x9d\xd4\x87\xd2\xd6\x4f\x8b\xbb\x76\x26\x2d\x09\x19\x89\x06\x1d\x3a\xd8\xb8\x24\x09\x11\xa2\x3e\xe4\x63\x60\x63\xa3\x88\x7d\x93\x10\xd7\x50\x50\xd0\x87\xe6\x3f\x2f\x96\x3e\x32\x45\x8f\x57\xc6\xc6\xa1\x4d\x0d\x13\x17\x97\x12\x1d\x71\xa7\x83\xf4\x17\xf1\x06\x11\x42\xa4\x49\x8a\xe8\x2e\x26\x0e\x2e\x3a\x35\x1c\x0c\x9e\x13\xac\xb7\x84\xea\x8c\xe0\x35\xd0\x51\x05\x93\xc1\xec\x39\xb5\x1a\x65\x26\xd0\x4f\xf2\xb4\x84\x25\x70\x01\x2e\x41\x2f\x58\x29\x65\x8b\x5a\xb1\x90\x9b\x54\xb3\x41\xfd\x96\x6d\x67\x8c\x8e\xa1\xab\xed\x9a\x31\x3b\xa8\xb3\x56\x9e\xd0\x0d\xdb\x56\xac\x5a\x7b\xc4\x13\xfe\x0f\x20\x48\x85\x12\x59\x8a\x68\x14\x29\x90\x63\x12\x95\x2c\xc1\x7f\xa0\xce\xff\xe3\xdf\x83\xc7\x7c\x70\x19\x7a\x2b\x40\xa4\xa4\x95\xbe\x7b\xb9\x9a\xfb\x44\x8d\xa7\x37\x7f\xbb\xeb\xb5\x87\xde\x68\x7e\x35\x07\x5c\xf4\x1c\xc7\x80\x10\x50\x42\x26\x82\xcc\x0d\x64\xa2\xe2\xdf\x38\xe3\x84\xb9\xc9\x38\x71\x22\x44\x89\x11\x45\x26\x46\x58\x8c\xb8\xb0\xc4\xb8\x29\x7c\x23\xc4\x88\x13\x25\x4e\x98\xa8\x18\x09\x71\xea\x79\x46\x4e\x44\x75\xfb\x62\x2a\xd7\xd5\xb5\xa5\xb5\xc4\xd4\x7b\xdb\x07\x3b\xf2\xc1\xee\xcf\x4f\x00\xb7\x0f\xc4\x3c\x08\xfd\xfe\xa5\xe0\x32\x47\x17\x0b\x07\x07\x93\x59\x94\x91\xef\xe9\xe8\xd3\x01\x12\x7d\xd2\x0f\xef\x6e\x66\x3e\x58\xb1\xf3\xef\xe6\x53\xca\xdb\x8f\x2c\xbe\x72\x55\x7c\x82\x80\xbc\xd7\xa1\x97\xa7\xf2\xc7\xee\xda\xd8\xe9\x32\xce\x1c\x77\xef\x5e\xb5\xbf\x5f\xb0\x5a\x72\x3b\x32\xdf\xb8\x31\x6f\x3c\xfb\x4c\xa3\x49\xde\x7a\xff\xfb\xec\xee\x95\xec\x9b\xcf\x7f\x71\xf8\x43\xa9\x37\xdf\xfb\xfc\xa3\xaf\x5f\xdf\x38\xbc\x73\xfd\xf1\x9d\x17\xbe\x59\x7e\x67\xe3\xef\xec\x5e\xcc\x3f\x02\x00\x00\xff\xff\x7c\xd1\xbe\x12\x83\x07\x00\x00")

func discordcanaryLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordcanaryLnk,
		"DiscordCanary.lnk",
	)
}

func discordcanaryLnk() (*asset, error) {
	bytes, err := discordcanaryLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DiscordCanary.lnk", size: 1923, mode: os.FileMode(0666), modTime: time.Unix(1709215620, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0xc, 0x3a, 0x83, 0x1a, 0x8f, 0x80, 0xb, 0x96, 0x4d, 0xb4, 0x62, 0x81, 0xaf, 0x3c, 0xdb, 0xc4, 0xdf, 0xab, 0x6a, 0xc6, 0x10, 0xe1, 0xff, 0xd, 0x2a, 0x13, 0xd6, 0xf1, 0x2b, 0x7a, 0xa2}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9b\xdd\x6e\x5c\x39\x8e\x80\xef\xf3\x14\x86\xaf\x77\x63\x51\x14\x29\xb2\x5f\x65\x30\x68\xf0\xb7\x63\xc4\x1d\x7b\x6d\xa7\x77\x1b\x83\x7e\xf7\x85\x13\xa7\x52\xf6\x64\x7a\x07\xc6\x14\xc6\xeb\xbb\x12\x74\xea\xe8\xe8\x3b\x5f\x11\x14\xa5\xfa\xdb\xbb\xb3\xb3\xf3\x5f\xaf\xf3\xf3\x55\xdd\x9d\xff\x74\xf6\xd0\x3c\x3b\x3b\xcf\xcb\xbb\xb8\xbe\xcd\x9f\xef\x6e\xea\xea\x2a\x3e\x54\x7c\x3c\xf4\x9d\x9d\x9d\xf7\xe7\xab\xab\xa3\xf6\xd9\xd9\xf9\x87\xeb\xbb\xfb\x9f\x7f\xab\xdb\xbb\xcb\xeb\x4f\xe7\x3f\x9d\xfd\xe5\xd0\x73\x76\x06\xff\x71\xd4\x18\xc7\x0d\x90\x75\x68\xfd\xf5\x7b\xc7\xe3\xd3\x1c\xdd\x0e\x8f\x3a\x6f\x2c\x3e\xda\x2f\xf5\xf3\xdd\x07\x9b\xc4\xe7\x3f\x9d\x9d\x8b\x37\x12\x59\xa1\x26\x1a\x10\xe0\x6c\x40\x6c\xd3\x98\x7b\x65\xc4\xea\xb1\x78\x61\x54\x6a\x4e\x62\x6e\x89\xbd\xdd\x03\x20\x57\x6b\xe8\xf9\xd1\xdd\x3f\xdf\x3e\x4c\xec\xfc\xc3\xfd\xfd\xcd\xdd\x4f\x17\x17\x79\xf5\x9f\x61\x9f\xec\xf6\xf7\xf7\x8f\x40\xec\xe6\xe6\xfd\xa7\xba\xbf\xc8\xcb\xbb\xfb\xdb\xeb\x0b\xbb\xb9\xb9\xf8\x7a\xc1\xc5\x7f\x5f\x7e\xba\xf8\x1f\xe1\x0b\x78\x3f\xde\x83\xac\x8b\xbf\x27\x78\x81\x17\x0f\xe0\xde\x7f\xfd\xee\xf9\xe3\xa0\x7f\x7c\x1b\xfd\x3c\xeb\xea\xde\xee\x9e\xd0\xfb\xdb\x11\xad\x3f\x63\xfc\x8c\xf2\x33\xce\x4f\x49\x3f\x61\xfd\x23\xda\xf3\x49\xf7\xdf\xf3\x76\x29\x5b\xbb\x4a\x57\x8d\xbd\xa6\x4a\x74\xe2\xa2\x6a\x5e\x61\xb3\x61\x8a\xad\x89\xb6\x00\x6b\x0d\x27\x5d\xb5\xc1\xd1\xc0\xb8\xc1\x93\xe6\xf9\x93\xfb\x9f\x9a\xf8\xed\xf5\xaf\x87\x2b\xe6\xf9\x61\xe4\x3f\x1e\x3f\xfd\xf5\xdd\xd1\x4b\x38\x68\xff\xf1\xf6\xf2\xee\xe6\xf5\x1a\xcf\x89\xd0\x92\x29\xad\x80\x21\x3a\x7b\xb7\xda\x5e\x14\x42\xde\xdc\x6b\x75\x82\x58\x19\x68\x40\x06\x53\x74\xc5\x14\x0f\x5e\x63\x58\x9e\xd8\xf8\x2f\xf0\xde\x8a\xec\xe2\xd0\xc4\xec\x23\xca\x31\x87\xb3\xa7\x53\x82\x69\x6d\x9a\x51\x33\xd7\x22\x1d\x11\x2e\x59\xd0\x3c\xda\x83\x58\xbd\x70\x48\xaa\x5a\x9d\x5a\xf6\x03\xec\x17\x79\x9e\x97\x77\x37\x76\x1f\x1f\x5e\xaf\xea\x3a\xd9\x22\xa0\x61\x91\x65\x1a\xcd\x35\x13\x2c\x26\x36\x90\xa9\xae\x70\xcf\xbd\x7b\xa1\x94\x18\x2c\x06\x5b\xdb\x9a\x93\x3c\xa8\xb5\xfa\xb4\xaa\x7f\xe3\xf7\x56\x6c\x67\xe4\xbd\xb3\x3c\x97\x24\x13\xe1\x00\xad\xdd\xae\x80\xbb\x42\x63\xe5\xe6\x72\x56\xf4\xdd\x51\xc0\xed\xe4\x58\x3e\xb6\x57\x06\x07\xe0\xa9\x6d\x3f\xe6\xfd\x22\xe1\x7f\xbb\xbe\x8c\xfa\x77\xda\x4e\x7f\x6a\x3b\x21\x0f\xb7\x60\x51\xe5\xb5\xf7\xf4\x09\xa1\xab\xa7\xd8\x58\x20\x1a\xd1\x62\x25\xb8\x66\xeb\x84\x84\x35\x69\xbb\x16\xab\x56\x2b\x30\xd6\x69\x6d\xff\x02\xef\x82\xfe\x7f\xa8\xbe\xfe\x0f\xd5\x7b\x2d\x10\x99\xce\x8d\x2c\xa5\xee\x4a\xb5\x9d\x07\xd3\x4e\x42\x2c\x98\xbc\x20\xa7\xb7\xcd\xda\xd5\x1d\x9d\xb6\x74\xcd\xd4\x31\x54\x91\x4f\xad\xfa\x01\xf6\xb1\xe7\xeb\x9f\xf5\xbc\x6e\xaf\x1e\xa6\xfc\x7a\xe3\x7a\xb2\xa7\x00\xf2\x54\x2c\x2f\x00\xdf\x81\x61\xb6\x15\xa6\x00\x1a\x22\x93\xd7\x74\xd9\xdc\x35\x61\x04\x29\xac\x76\x93\x89\xa3\x42\x31\x4e\x6b\xfa\x23\xbe\x37\x13\xd6\xd3\x8b\xd8\xa3\x84\xa4\x27\x05\xc9\x8a\x84\xd8\xce\xb5\x49\x49\x71\x53\x82\x48\xcc\xe2\x01\xe9\x9e\xdc\x93\x2a\xc6\x6c\x48\x8d\xf4\x53\xbb\x7e\x84\xfb\x65\x69\x4c\xdd\x7d\xbc\xbf\xbe\xf9\x39\xae\x6f\xff\xad\xc1\xfd\xcf\x95\xf7\x26\x92\xbd\x42\x88\xcd\x4c\x7c\x2a\xcc\x72\xed\xf6\x8e\xf2\x3d\x74\xc8\xaa\x51\x3a\xc7\xec\xd2\x42\x43\x42\x71\x53\xaf\x9d\xbd\x6d\x9c\x38\x95\x39\x62\xf8\x56\xbc\x0f\x57\x49\xb0\x0c\x1d\x8e\xd0\xc8\x08\x82\x44\xcd\xc3\xf7\x26\xda\x0e\x81\xa0\x08\x88\x55\x22\x4e\x3b\x3b\xa1\x86\x7a\x0c\x09\x92\x3e\x79\x3a\xf3\x8c\xf9\x8b\xe4\xff\x70\x7d\xfd\x8a\xe3\xfc\xd8\x46\x93\xe7\x8a\xa8\x5e\x54\x3c\x1f\x16\x45\xc8\x5b\x21\x15\x17\x3a\x03\xc8\xea\x48\xaa\xe5\x1c\x5b\xc3\x12\x42\x9d\x2d\x59\xc8\xc7\x89\xe3\xfc\x03\xbb\xb7\x22\x3b\x94\x71\x97\xb1\x14\x0e\xa4\x9a\x38\xb9\xdc\x77\x54\x74\x4b\x77\x67\x02\x2f\x83\x7e\x68\xeb\x58\xad\x7b\x65\xe4\x1c\xc1\x32\xcc\x06\x9c\x5a\xf6\x6f\xac\x5f\x24\xf9\xe7\xfb\xcb\xab\xbb\xd7\x6b\xb9\x82\x76\xd9\x76\x9f\x3e\xf7\xe8\x1e\x4d\x9e\x36\x6c\x66\xfb\x8c\x98\x1e\xdb\xcd\x29\x6d\xd1\xa8\x25\x40\x20\xea\x3c\x83\xc8\x4b\x00\x4e\x5c\x90\xf9\x02\xef\xad\x68\x8e\xcd\x1a\x0a\xd2\xc8\x3e\xd3\x3d\x60\x66\x27\x6d\xc5\xed\x66\x25\xd0\xbe\x9c\x1a\x1f\x3a\x24\x52\x3b\x22\x03\x8d\x7c\x71\x2f\x70\x39\xb5\xe6\x07\xd8\x2f\xf2\xfc\xae\x3e\xde\x5e\xde\xbf\x5e\xd1\x19\x71\x0a\xd2\xa6\x89\x8d\x15\xd4\x41\x00\x90\xb3\x98\xa9\xbd\x33\xb8\x16\x0a\xa1\x61\x78\x6b\xef\x48\x43\x99\xd0\xd6\x83\x25\x4e\x1d\xce\xbf\xd2\x7b\x2b\xa6\x2f\x16\x33\xd5\xa0\x31\x91\x8c\x82\xac\x9a\x3c\xd4\xb5\x25\x08\x55\x4c\x7d\x6c\x5c\x60\xbd\xa3\xa5\xb6\xd8\x88\x89\x6d\x6b\x0e\x28\xa7\x93\xd7\xd9\x0f\xb4\x5f\xa4\xfa\xf3\x3d\xa7\x57\xe7\x3a\x08\x0b\xf5\x0a\x63\x30\x1e\x29\x09\x39\x58\xcd\x26\x6d\x35\xd1\xb1\x43\x47\xe3\xd0\xb9\x7a\x2f\xea\xcc\x90\x3d\x71\x98\x8e\xa4\x4c\x3b\xb1\xeb\x8f\xf8\xde\x8a\xec\xa6\xdb\x0a\xc9\x03\x1a\x2c\xb2\xa0\x88\x67\xcf\xd1\x50\x3c\x46\x46\xa7\x97\x4e\x6d\x1f\xbe\x15\x46\x4a\x87\x24\x2d\xd8\xb1\x4d\x42\x4f\x5e\x79\x3c\xc2\xfd\xb2\xc2\xe3\xe5\x2f\x97\x57\xf6\xe9\xfe\x15\xaf\x4f\x47\x0f\x23\xdb\x58\xbc\xa6\x90\x2b\x4d\x56\xc5\xc9\x2b\x07\x94\xe4\x6c\x2d\x1a\xc5\x02\x80\x22\x83\x4b\x79\xad\x91\x54\x89\x18\xc9\xfb\xc4\x49\xcc\x01\xe0\x5b\x31\xbe\x5a\xd2\x78\x32\x8f\x6a\x77\x9c\x5a\xa2\x00\xb9\x94\xc8\x97\x90\xf1\x34\xe8\xd9\x32\xa0\x6b\x37\xbb\x8b\xd1\xde\xa0\x06\x14\x0f\x17\x9d\xbc\x00\x79\x0c\xfc\x45\xce\x5f\xff\x56\xb7\x57\xf6\xfb\x7c\xbd\xca\xdb\xaa\xec\x22\xef\xb9\x9c\x88\x85\x82\xa9\x62\x04\x70\xad\x61\x54\xac\x8c\x3a\x0a\x51\x44\x24\x90\x37\x28\x0a\xf3\xee\x35\x56\xa9\x9f\x78\x77\xe9\x1b\xbf\xb7\x62\x7c\xce\x99\xd6\x94\x3e\x78\x80\xb8\x32\xb4\xe5\xda\x39\xa9\x96\x38\x48\xf8\x56\xcc\x8c\x4c\xac\x95\x46\xe4\x9b\x76\x2d\xd3\x44\x1e\xe4\x27\xdf\x4b\x3d\xe6\xfd\x22\xe1\x7f\xb1\x5f\xeb\xb5\x2f\x55\x13\xb3\x81\x27\x37\x8d\x92\x44\x91\x09\x49\xb4\x0c\x7b\x60\xef\xcd\x8b\x16\xd3\x64\xd0\x60\x51\xda\x5d\x53\x87\x0e\x77\x5d\x09\x15\xbd\x4f\xab\xfc\x77\x82\x6f\x45\xfa\x91\xec\x04\xd1\xbe\x02\x9b\xc4\x92\x05\x98\xab\x17\x72\x75\x8f\xc5\x98\x2d\x9b\x46\xd8\x4a\x1a\x73\x25\x0f\x46\x11\x2a\x9d\x95\x93\xec\xd4\xd2\x3f\x25\xfe\x22\xed\x6f\x6f\xe2\xf5\xfa\x4e\x4a\x2b\x46\x8f\x6d\x61\x6d\x63\x27\x3a\x23\xcd\x39\x51\x87\x72\xcd\x3d\x12\x9c\x57\xc7\x10\x8d\x31\xc7\xf6\x91\xed\x6d\x33\xc7\x64\xa0\x13\x57\xdd\x6f\x6f\xe2\xad\x88\x6e\xcb\x1d\x26\x4e\x2c\x70\x55\x58\xa4\x3b\x93\x25\x39\x04\x05\x8c\xa0\x93\x99\xb3\x42\x97\xe1\x74\x97\x36\x2b\x66\xd3\x4c\x58\x6c\x27\xcf\x67\x1e\x51\xbf\xc8\xf0\xb8\xba\xfe\x9c\x77\xbf\x7f\x7a\xc5\x9e\xb7\xcb\xc2\x6c\x33\x43\xc1\x16\x1d\xe2\x08\xb8\x33\x03\xc7\xdc\xf6\x90\x52\xca\x6e\x74\xe5\x00\x6f\xca\xc9\xad\x9b\x5a\x6d\x6c\x03\x76\x3b\xad\xe7\x07\x80\x6f\xc5\xf6\x64\x4c\xc6\x60\xd9\xc3\xc5\x5a\x90\x9d\x78\x89\x8f\xac\x01\xd3\xdb\x2b\xd6\xa0\xa0\xa9\x2e\x39\x72\x22\x98\x48\xe2\x58\xe4\x02\xee\xe3\xd4\xb6\x3f\x01\xfe\xb2\xfa\x4c\xe5\xa5\xbd\x62\xdf\x6b\x7a\x2e\xc1\x29\x2a\x68\x40\x5d\xcb\x73\x8b\x37\xb8\xbb\xad\xd8\xae\x8b\x58\x43\x4a\x4c\x54\x97\xb4\x84\xed\x35\xc8\xc6\xca\xa1\xf3\xc4\xd5\x99\x07\x78\x6f\xc5\xf5\x58\x2a\x81\x6a\x95\xe0\x96\x08\x83\x38\x70\xe5\x30\x26\xd7\x5e\x65\x63\xd3\x9e\x53\x4b\x0d\x3a\xb7\x49\xdb\xb0\xa9\x84\xbe\x6c\x8f\xd3\xe7\xed\x07\xd8\xff\x9c\xe7\xef\x1e\xdf\xc1\x53\xa1\xff\x11\xed\x03\xe7\x03\xe1\x6f\x6c\x1f\xa9\xfe\x78\xa1\x33\x61\x6f\xda\xbc\x7c\xe8\xb2\x31\x09\x2b\x62\xc5\x7c\x58\x3c\x72\x87\xcf\xae\xc6\xdc\x18\x92\x56\xbb\x14\x4d\x7a\x2c\x2b\xeb\xc0\xf9\x0d\xd8\xbf\x10\xd5\x33\x0f\xbf\xce\xff\x99\x7f\x87\x1f\xfa\x3f\xf4\xee\xc8\xb9\x23\xdf\x40\xf0\xdd\x33\xcf\x7e\xb4\x45\xc6\x06\xb0\x86\x77\x90\x5a\x2d\x94\x2f\xa5\x54\x13\xc6\xc4\x15\x29\x35\x56\xae\x69\xb5\xb8\xb9\x75\x86\xd8\x1a\x98\x0e\x8a\xb5\x02\xe4\xfb\x19\x94\x7f\x25\x95\xef\xc2\xe0\xf9\x41\x8e\x2f\xb3\x38\xbf\xad\xff\xfa\x7c\x79\x5b\xc7\x75\xea\xbf\x3c\x0d\x90\x4f\x4e\x9d\x3c\x0b\x9e\xdf\xce\x5f\x3d\xdf\xde\xf9\xfe\x77\x8a\x1f\x6e\x70\x3e\x2f\x1a\x7e\x39\xad\xf8\xf0\x48\xef\xfe\x78\xf7\xbf\x01\x00\x00\xff\xff\x51\x37\xc7\x31\xa9\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12713, mode: os.FileMode(0666), modTime: time.Unix(1709215620, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0xf5, 0xd5, 0x9b, 0x86, 0x7a, 0x63, 0xd, 0xb0, 0x13, 0xbf, 0x68, 0x42, 0x92, 0xa5, 0x7b, 0xc4, 0x5b, 0xf1, 0x50, 0x82, 0x32, 0xe, 0xf9, 0x87, 0x1f, 0xa4, 0x5b, 0x60, 0x8d, 0x82, 0xc2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DiscordCanary.lnk":  discordcanaryLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DiscordCanary.lnk": {discordcanaryLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
