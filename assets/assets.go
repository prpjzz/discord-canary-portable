// Code generated by go-bindata. DO NOT EDIT.
// sources:
// DiscordCanary.lnk (1.923kB)
// pinned_update.json (12.712kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordcanaryLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x68\x2b\x55\x14\xc7\x7f\xf1\x3d\x79\xbe\x5d\xc4\xe0\x17\xef\xd9\x79\x48\xe4\x81\xcc\xe4\xa3\x79\x8f\x24\xa0\xe4\x35\x1f\xa6\x74\x30\x43\x3e\x68\x94\x11\x3b\x26\x03\x19\x69\x92\xe9\x4c\xd2\x0f\xbb\x10\x5d\xb8\x10\x0b\x82\x2e\x5c\x58\x1a\x44\xd1\x85\x2e\xc4\xba\x69\x45\xeb\xc2\xa5\xd2\x45\xab\xa5\x2b\x2b\xe8\x42\xa1\x5d\x08\xba\x51\x90\xb9\x4d\x4a\xd3\x46\xdd\xb8\x51\xfc\x5f\x72\x6f\xee\x3d\xe7\x9e\xff\xff\x9c\x19\xce\xa8\x80\x2f\x70\x1b\x1e\xb6\xc4\x4c\xee\x28\x05\x12\xf0\xfb\x03\x4f\x45\x57\x0b\xfb\xbe\xf5\x5f\x9e\x16\x2b\xfe\x47\x5f\xbd\x7a\x7d\xdf\x77\x6f\xf6\x1e\xe1\xe8\x63\x18\xbf\x12\x60\x4c\xfb\xb6\xb0\x2d\xfd\x98\xb4\xfc\x6f\xed\xdd\xc1\xc3\xe1\xf0\xea\x7d\x84\xd2\x49\x9d\xf3\x68\x10\x11\x6b\xa2\xba\xd5\xf5\x4b\x19\xcb\xad\xb5\x9d\x7a\xda\x68\x19\xce\x12\x2a\x97\xb9\xc8\xd1\xa7\x89\xea\xc7\x5d\xcf\xae\x00\x5f\xa6\x3c\xc2\xd4\x99\x28\xbd\x85\x4b\x64\xb0\x70\xa9\xd1\xc6\xa1\x4e\x1a\x83\x16\x06\x0e\x4b\xc0\x15\x66\x88\xe2\x49\x7e\x69\x9a\xb4\x44\xc5\xae\x1b\x1d\x53\x31\x17\x4d\xc8\x9d\xb0\x6c\x76\xbd\x9f\xc7\xf2\xd3\x9e\x57\x8c\xc0\x08\xbd\x15\x6c\xea\x18\x74\x30\x51\x30\x59\xc4\x04\xee\x17\x16\x8f\xe7\xb8\x20\xde\x1a\xef\xdf\x28\xf7\xf7\x17\x00\xed\xb3\x17\x9f\xf4\x03\x2d\xb3\x2c\xb9\x0b\xed\x7a\xcb\x9a\x26\x9d\xd4\x87\xd2\xd6\x4f\x8b\xbb\x76\x26\x2d\x09\x19\x89\x06\x1d\x3a\xd8\xb8\x24\x09\x11\xa2\x3e\xe4\x63\x60\x63\xa3\x88\x7d\x93\x10\xd7\x50\x50\xd0\x87\xe6\x3f\x2f\x96\x3e\x32\x45\x8f\x57\xc6\xc6\xa1\x4d\x0d\x13\x17\x97\x12\x1d\x71\xa7\x83\xf4\x17\xf1\x06\x11\x42\xa4\x49\x8a\xe8\x2e\x26\x0e\x2e\x3a\x35\x1c\x0c\x9e\x13\xac\xb7\x84\xea\x8c\xe0\x35\xd0\x51\x05\x93\xc1\xec\x39\xb5\x1a\x65\x26\xd0\x4f\xf2\xb4\x84\x25\x70\x01\x2e\x41\x2f\x58\x29\x65\x8b\x5a\xb1\x90\x9b\x54\xb3\x41\xfd\x96\x6d\x67\x8c\x8e\xa1\xab\xed\x9a\x31\x3b\xa8\xb3\x56\x9e\xd0\x0d\xdb\x56\xac\x5a\x7b\xc4\x13\xfe\x0f\x20\x48\x85\x12\x59\x8a\x68\x14\x29\x90\x63\x12\x95\x2c\xc1\x7f\xa0\xce\xff\xe3\xdf\x83\xc7\x7c\x70\x19\x7a\x2b\x40\xa4\xa4\x95\xbe\x7b\xb9\x9a\xfb\x44\x8d\xa7\x37\x7f\xbb\xeb\xb5\x87\xde\x68\x7e\x35\x07\x5c\xf4\x1c\xc7\x80\x10\x50\x42\x26\x82\xcc\x0d\x64\xa2\xe2\xdf\x38\xe3\x84\xb9\xc9\x38\x71\x22\x44\x89\x11\x45\x26\x46\x58\x8c\xb8\xb0\xc4\xb8\x29\x7c\x23\xc4\x88\x13\x25\x4e\x98\xa8\x18\x09\x71\xea\x79\x46\x4e\x44\x75\xfb\x62\x2a\xd7\xd5\xb5\xa5\xb5\xc4\xd4\x7b\xdb\x07\x3b\xf2\xc1\xee\xcf\x4f\x00\xb7\x0f\xc4\x3c\x08\xfd\xfe\xa5\xe0\x32\x47\x17\x0b\x07\x07\x93\x59\x94\x91\xef\xe9\xe8\xd3\x01\x12\x7d\xd2\x0f\xef\x6e\x66\x3e\x58\xb1\xf3\xef\xe6\x53\xca\xdb\x8f\x2c\xbe\x72\x55\x7c\x82\x80\xbc\xd7\xa1\x97\xa7\xf2\xc7\xee\xda\xd8\xe9\x32\xce\x1c\x77\xef\x5e\xb5\xbf\x5f\xb0\x5a\x72\x3b\x32\xdf\xb8\x31\x6f\x3c\xfb\x4c\xa3\x49\xde\x7a\xff\xfb\xec\xee\x95\xec\x9b\xcf\x7f\x71\xf8\x43\xa9\x37\xdf\xfb\xfc\xa3\xaf\x5f\xdf\x38\xbc\x73\xfd\xf1\x9d\x17\xbe\x59\x7e\x67\xe3\xef\xec\x5e\xcc\x3f\x02\x00\x00\xff\xff\x7c\xd1\xbe\x12\x83\x07\x00\x00")

func discordcanaryLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordcanaryLnk,
		"DiscordCanary.lnk",
	)
}

func discordcanaryLnk() (*asset, error) {
	bytes, err := discordcanaryLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DiscordCanary.lnk", size: 1923, mode: os.FileMode(0666), modTime: time.Unix(1709215620, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0xc, 0x3a, 0x83, 0x1a, 0x8f, 0x80, 0xb, 0x96, 0x4d, 0xb4, 0x62, 0x81, 0xaf, 0x3c, 0xdb, 0xc4, 0xdf, 0xab, 0x6a, 0xc6, 0x10, 0xe1, 0xff, 0xd, 0x2a, 0x13, 0xd6, 0xf1, 0x2b, 0x7a, 0xa2}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9a\xdd\x6e\x5c\x37\x92\x80\xef\xf3\x14\x82\xae\x77\x2d\x56\x91\xc5\xaa\xca\xab\x0c\x82\xa0\x7e\x63\xc1\x8a\xa5\x95\xe4\xec\x06\x83\xbc\xfb\xa2\x6d\xb9\xdd\xf6\x24\x99\x40\x98\x46\x04\x01\xe7\xa2\xd9\xec\xe6\x39\xfc\xf8\x9d\x02\x59\xe4\x3f\xbf\xbb\xb8\xb8\xfc\xf9\x36\x3f\xdc\xd4\xc3\xe5\xf7\x17\x87\xe2\xc5\xc5\x65\x5e\x3f\xc4\xed\x7d\xfe\xf8\xf6\xf6\xf6\xdd\xf1\xdb\x8b\x8b\xcb\xfe\x70\x73\x73\x52\xbe\xb8\xb8\x7c\x7b\xfb\xf0\xf8\xe3\x2f\x75\xff\x70\x7d\xfb\xfe\xf2\xfb\x8b\x7f\x1c\x6b\x2e\x2e\xe0\xbf\x4e\x0a\xe3\xb4\x00\x0a\xc7\xd2\x0f\x5f\x2a\x9e\x9e\xe3\xa4\xb9\x93\x26\x2e\xef\x2c\xde\xd9\x4f\xf5\xe3\xc3\x5b\x43\xda\x97\xdf\x5f\x5c\x26\x31\xaf\x99\x6a\x29\x6c\x85\xd4\xbb\x19\x8a\x1c\x3d\x17\xf0\x5c\xe4\xac\xc0\x58\xb1\xd6\xa0\xda\x30\x87\xc0\xa6\x5a\x15\x3d\x94\x10\x2f\x4f\x5a\xff\x70\x7f\xe8\xd8\xe5\xdb\xc7\xc7\xbb\x87\xef\xaf\xae\xf2\xe6\xbf\xc3\xde\xdb\xfd\xaf\x6f\x9e\x50\xd8\xdd\xdd\x9b\xf7\xf5\x78\x95\xd7\x0f\x8f\xf7\xb7\x57\x76\x77\x77\xf5\xe9\x07\x57\xff\x7b\xfd\xfe\xea\xff\x64\x5f\xc1\x9b\xf1\x06\x14\xae\x4e\xd9\x5d\xc1\xd5\x01\xd9\x9b\x4f\xff\xba\x7c\xba\xdd\x6f\x9f\xef\x7b\x99\x75\xf3\x68\x0f\x5f\x71\xfb\xe7\x09\xa7\x3f\xa3\xfb\x0d\xdf\x6f\x08\x1f\x18\x8f\x93\xf2\x0f\xa7\x95\xff\xca\x19\xbf\xaa\xfe\x57\xd2\x73\xd2\x32\xca\x14\x69\x4d\xe3\xd4\xac\x8c\x70\x11\x88\x8c\x35\x70\x94\x22\xcc\x2a\x9a\x80\x34\x05\xd7\x62\xdf\x45\xd5\x9b\xcd\x06\xc2\xe5\x57\xed\x9f\x8f\xf5\xfd\xed\xcf\x4f\x75\xe3\x0a\x2f\x8f\xf7\xfc\xed\xe9\xd3\x0f\xdf\x9d\xe0\x3f\x4a\xfe\xe1\xf1\xfa\xe6\xe1\xe5\x5a\xce\x38\x8c\x48\x4b\x87\x0c\x65\xac\x31\x1b\xa9\x6d\xd4\x46\x5f\x3a\x05\xf7\x01\xf1\xa6\x72\x68\x96\xcd\x49\x33\x50\x6d\xda\x08\x0e\x69\x38\xaf\xe5\x1f\xe1\xbd\x16\xcd\x61\x14\x05\x22\xab\x90\xfa\x3a\x5c\xe8\x31\x10\x71\x67\x25\x91\x02\x11\xf5\x5a\xd5\x25\x11\xce\x0b\x64\x80\x40\xb5\xcf\xd5\xb5\xa4\xcf\xad\xf9\x11\xf6\xb3\x3c\xbf\xfd\xa5\xee\x6f\xec\x57\x7c\xb9\xaa\xab\xaf\x4e\x08\x67\x5d\x0e\xb5\x86\x6e\x51\x40\x18\x8b\x9d\x5c\xad\xb2\x04\x05\xf6\x5a\xdc\x13\xd2\xba\xb2\x76\x10\x6e\x36\xb1\xa8\xd1\xe7\x55\xfd\x33\xbf\xd7\x62\xbb\xc7\xe8\xe2\xcd\x0d\xe6\x0e\xb6\x61\x55\x18\xa5\x41\x58\x92\x9a\x83\x58\xd7\x5c\x99\x33\x07\x00\x70\x38\x6e\xc3\xc2\x25\xae\x36\xf6\x38\xb7\xed\xa7\xbc\x9f\x25\xfc\x43\xbd\xbb\xbf\x7e\x7c\xb9\xba\xfb\x82\xe1\x03\x64\x45\x77\x03\x8d\x0d\x36\x79\xba\x07\x0e\x57\x25\xa6\xa5\x5d\xad\xb0\x5b\x97\xef\x91\xb0\x65\xb8\x1b\xf3\x90\xc3\xd0\x9d\x39\xb2\x7f\xa2\xf7\x5a\x64\x9f\x81\xcd\x02\x54\xc0\x00\xb0\x78\xa9\x0f\x18\x48\x8c\xd3\x3d\x65\xf1\xee\x85\xc5\xd3\x68\x35\xc2\x6e\xce\xdd\xc9\x8a\xac\xb0\x58\x15\xcf\x2d\xfb\x17\xda\xcf\x52\xfd\xfe\x2e\x5e\xb0\xe7\xd4\x93\x46\xfb\xd0\x51\x56\x34\xd4\xa4\x65\xba\x06\xeb\x9a\xdd\x8b\x40\x04\x78\x8f\x5e\x6a\x14\x38\xa3\x25\xb8\x90\xb3\x70\x24\xcf\x7d\x5e\xcf\xef\xef\xe2\xb5\x48\xae\x35\x30\x81\x27\x0c\xc9\x81\x16\x69\xad\x51\x30\x07\x57\x8c\x8e\xa5\x38\xb0\x11\x40\x89\x2a\xd0\x79\x2d\x6f\x05\xac\x95\xaa\x7b\x2f\x3d\xb7\xe4\x4f\xa8\x9f\x65\xf8\x2f\xd7\x3f\x5d\xdf\xd8\xfb\xc7\x7a\xc1\x9e\xc7\xf4\x8c\x28\xc7\xa4\xb1\x19\x99\x31\x46\x22\x10\xa2\xb8\x2f\x87\xde\x9a\x09\xb8\x60\x4d\xca\x20\x31\x86\xd6\x39\x2b\x29\x81\xd4\xcf\xeb\xf9\x11\xe0\x6b\xb1\x3d\x50\x77\x16\x56\xef\x39\x62\x5a\xb0\x82\x2b\x5b\x07\xa1\x7a\x85\x16\x08\x4e\xb3\x69\x95\x3b\xb4\x7d\x8a\xb5\x65\x69\x6d\x6e\x1e\x60\xe7\xb6\xfd\x2b\xe0\xcf\x72\xfe\xe7\xca\x6b\x7b\xb9\xbe\xab\x2f\x62\xdd\xe6\x96\xc1\xa0\xc3\x77\x48\xcf\x7d\x58\x31\x55\xbb\x16\x81\x20\xb8\xb3\xc0\x16\xd5\xa2\x34\xa3\x18\x21\x68\x01\x6e\x93\xcf\xeb\xfb\x47\x78\xaf\xc6\x75\xd8\xbc\x1d\x6a\x40\x37\x8c\x0a\xd3\xbd\x69\x99\xe1\x88\xd9\x2a\x5c\x64\x2e\xe5\xe4\x18\xb6\x04\x29\x89\x5b\x7c\xa0\x63\x44\x35\x9f\xdd\xf5\x23\xec\x67\x79\xfe\xee\xfe\xfa\xe1\xee\xe5\x7a\xee\xc3\xcc\xd7\x1c\x7b\x76\x06\xcb\x1e\xb8\xc5\xa3\x95\xd5\x7c\xaf\xda\x49\x55\xa1\xb4\x07\x0f\x1e\xd3\x31\xa3\x85\x8d\xc7\x92\x9a\x08\x29\xe7\xf5\xfc\x23\xbc\xd7\xe2\xb9\xb0\xae\xa5\xac\x02\x31\x44\x5c\x3b\x91\x6d\xd1\xcc\x5d\xb4\x8a\x5b\x46\x31\x2b\x70\xc8\x2a\xd9\x19\x8d\xbe\x90\xcc\x91\x60\x58\xd0\xd9\x33\x30\x47\xd8\xcf\x8b\xe7\xdf\xe4\xd9\x5f\x9c\xe9\x13\x96\x97\x60\x45\xfa\x96\x9e\x1d\x94\xb8\xb5\x7a\x81\x6f\x30\x54\x31\x77\x0d\x4f\x25\xcd\x5a\xdd\x1c\x53\x68\x27\x92\xf5\xa8\xa2\x79\xe6\x88\xfe\x09\xdf\x6b\x71\x9d\x63\x33\x39\xcd\x49\x08\x5b\x80\x3d\xd6\x0a\xf7\x85\x1b\x53\x80\x7c\x08\xcf\x60\x77\x59\x82\x89\xe9\xb2\xb4\x36\x11\x6d\xd9\xb1\xcd\xf3\xec\x31\xfd\x0b\xee\xe7\xa5\x5f\xee\xea\xe6\x26\xde\x56\xbc\xe0\x2d\x24\x4b\x5c\xea\x0c\x43\x1b\xd7\x96\xd5\x8b\x70\x25\x2d\xf1\xc1\x5c\x14\xb9\xb4\xbc\x03\x67\x4f\xd5\x20\x98\x35\x68\xcc\xd5\x4e\x71\x18\x8f\x73\xa7\x60\x8e\x04\x5f\x8b\xf3\x39\x4b\x87\xce\x6d\x5b\x7b\xf9\x3c\xc4\xfa\x31\x41\x61\x0f\x98\x92\x81\xad\x73\x7b\xe6\xd4\x42\xc7\x9e\xc2\xa4\x96\xd0\xd6\xc4\x50\x2a\xf3\xec\x69\x98\xaf\x88\x3f\x4b\xfb\x9f\xec\xe7\x7a\xe9\x7b\x4a\xcb\x37\x52\xfa\xaa\xda\x63\x22\x09\xcc\x94\x29\x22\x32\xba\x24\x2c\x82\x7d\xbb\xb2\xc8\xb2\x94\xe5\xce\x05\x50\x1b\xc4\x10\xd8\x7c\x9e\x39\xd1\xfe\x85\xe0\xab\xd1\x5e\x9d\x7a\xd3\x34\x57\xc9\x1c\x7b\x85\xa1\x44\xab\xb7\xef\xb9\x06\x42\xb8\xcf\xe6\xae\x9c\xd3\x88\x60\x28\x15\xf5\x0e\x41\x31\x53\x3c\x7b\xf6\xf1\x6b\xe2\xcf\xd2\xbe\xee\x6f\x0e\xfd\x7e\xb9\xce\x7b\xd6\x98\x4b\x76\xca\x90\x34\x88\x2a\x80\x51\x63\x54\x70\x29\xc4\x04\xb3\x86\x5e\x5e\xcb\x66\xc3\x8a\xde\x7b\x78\xb3\xcc\x11\x36\x58\xe2\xbc\xce\x3f\xe1\x7b\x2d\xc2\x07\x6d\x11\xf6\x5e\x56\xc0\x6b\xd7\x06\x62\xda\x6e\x5a\x1b\xb6\x2c\xa0\x9c\x5c\x45\x2e\x92\x36\x99\x38\x8d\x2a\x71\x60\x53\x84\x6a\x9d\x7d\x6e\x73\x82\xfb\x59\xb6\xc7\xcd\xed\x87\x7c\xf8\xf5\xfd\x0b\xce\xba\xc7\x1e\x7b\xee\x9e\x34\xf7\x5a\x83\x06\xef\xd6\x58\x48\xb0\x13\x71\x81\x2a\x01\xd9\xb0\x9a\xdc\x2c\xc1\x56\xee\xbe\x67\x01\x63\xa9\x02\xd0\x79\x7d\x3f\x02\x7c\x2d\xc6\x27\x50\xcc\x80\xe6\xbd\x72\x03\xad\xb6\x30\x37\xdd\xbb\x88\x7c\xcc\x58\x13\x7d\x5b\x02\xe8\xf0\x45\x34\x28\x57\x46\x99\xed\xcc\xcc\x3d\xce\x6e\xfc\x57\xc0\x9f\xe5\x7c\xd6\xc3\xbb\xc7\xdb\xbb\x1f\xe3\xf6\xfe\x05\x27\xe1\x63\x09\x85\xea\xca\xea\xcd\x1e\x11\xda\x82\x98\x1a\xe5\x44\xe9\x13\xc1\xa7\x52\xb9\x31\x88\xea\x6e\x2e\x86\xc8\x61\x9e\xcb\xad\xe9\xcc\x87\xc2\x4e\x19\xbe\x16\xf3\x43\x71\x2b\xc8\xa2\x4d\x0b\xc5\xc8\x64\x99\x18\x0b\xe8\x0a\x55\x1f\x82\x0d\x38\x6b\xd8\x5c\x4a\x9d\xc9\xd3\x0f\xaf\x89\x96\x8f\xb1\x8c\xf7\xb9\xcd\xff\x96\xf9\xf3\xb6\x9f\x6e\xaf\xe3\x6f\xb5\x1e\xff\xd4\x7a\x72\x85\x25\x0c\xe0\x14\xec\x43\x98\xc1\xa5\x0e\x2b\xab\x56\x9a\x33\x2a\x58\x35\x17\xce\x65\xce\xce\x08\x0a\x50\xad\xd3\x50\x9a\x4b\xd7\x99\xb7\x9e\x0e\xf0\xae\xf0\x6f\xd4\x1d\xfe\xba\xee\xf0\x6f\x74\xf7\xa1\x18\x6c\x96\x83\x63\xf2\xaa\x26\x66\x61\x20\x55\xd7\x61\x2e\xd4\x4e\x07\xd3\xb7\x68\xe3\x6e\x61\xed\xa5\x1c\xcd\x43\x03\x74\x9e\xfd\x2c\xe4\x11\xf6\x17\xcf\xe1\x0a\xfe\x72\x90\xbf\x7e\xb8\xb3\xc7\x78\xfb\x72\x03\x3c\x34\x33\xe4\xc7\x6b\xcd\x89\xc9\x8b\x97\x07\xc7\xd8\x5a\x05\x49\xe2\x92\x6b\x8e\x41\x9b\x2c\x6d\x40\x69\xcf\x96\x1a\xb0\xb2\x75\xf3\x99\x4f\x13\x7c\xe6\xf7\x5a\x82\x3b\x6e\x13\x0f\xdf\xc3\x74\x7a\xb5\xe5\xda\xe5\x8e\xb0\x18\xc5\x6b\xe1\xe4\x9d\x4a\x83\x46\xaf\xe0\xe1\xf0\x71\xc9\x74\x58\xde\xda\xd6\xd2\x51\x67\x0f\xee\x27\xbc\xff\x5a\x60\xff\xee\x69\x18\xbe\xd6\xfa\x8f\x80\x1f\x51\x1f\x21\x7f\xd6\xf8\x09\xec\xef\x19\x7a\x58\x38\x06\xf1\x21\xe0\x2a\x2b\xed\x18\xb4\xbb\x00\x67\x86\xf5\xb6\xd2\xf4\xcc\x81\x7b\x8c\x74\x56\xc7\x42\xc4\xec\xb5\x73\x96\x4f\xfa\x7c\x0c\xe3\x3f\x48\xeb\x1b\x15\x3f\xf5\xff\x1b\x05\x8f\xaf\xfb\x1f\xaa\x77\xa2\xdd\x89\x72\x5f\x74\x3b\xaa\xf6\xfb\x67\xf5\xa7\xb6\x49\xc4\xb6\x2c\x2b\xdb\xcd\x0d\x55\x71\x98\x8c\x0d\x86\x46\xc4\x49\x99\xb6\x76\xec\x92\x89\x93\xd3\x72\x61\xa4\x76\xcd\xf1\x25\xf1\xf7\x9f\xa4\x72\x22\xcc\xe5\x51\x8e\x8f\xbd\xb8\xbc\xaf\xff\xf9\x70\x7d\x5f\xa7\x7b\x36\xff\xf8\x93\xe9\xf0\x1f\x24\x43\xfe\x38\x23\xfe\x4d\xcd\xa7\x7c\xe1\xef\xce\x39\x0e\x8f\xf4\xdd\x6f\xff\x1f\x00\x00\xff\xff\xa4\xdb\x69\xfb\xa8\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12712, mode: os.FileMode(0666), modTime: time.Unix(1709957992, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0x95, 0x30, 0xe5, 0xc5, 0xc5, 0x13, 0xe, 0xf2, 0xf9, 0x32, 0xa8, 0x19, 0x86, 0x30, 0xd4, 0x5f, 0x67, 0x4d, 0x8d, 0xee, 0xe7, 0x92, 0x8, 0x28, 0x78, 0x97, 0x49, 0x23, 0xd, 0xa9, 0xbd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DiscordCanary.lnk":  discordcanaryLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DiscordCanary.lnk": {discordcanaryLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
