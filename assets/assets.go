// Code generated by go-bindata. DO NOT EDIT.
// sources:
// DiscordCanary.lnk (1.923kB)
// pinned_update.json (12.717kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordcanaryLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x68\x2b\x55\x14\xc7\x7f\xf1\x3d\x79\xbe\x5d\xc4\xe0\x17\xef\xd9\x79\x48\xe4\x81\xcc\xe4\xa3\x79\x8f\x24\xa0\xe4\x35\x1f\xa6\x74\x30\x43\x3e\x68\x94\x11\x3b\x26\x03\x19\x69\x92\xe9\x4c\xd2\x0f\xbb\x10\x5d\xb8\x10\x0b\x82\x2e\x5c\x58\x1a\x44\xd1\x85\x2e\xc4\xba\x69\x45\xeb\xc2\xa5\xd2\x45\xab\xa5\x2b\x2b\xe8\x42\xa1\x5d\x08\xba\x51\x90\xb9\x4d\x4a\xd3\x46\xdd\xb8\x51\xfc\x5f\x72\x6f\xee\x3d\xe7\x9e\xff\xff\x9c\x19\xce\xa8\x80\x2f\x70\x1b\x1e\xb6\xc4\x4c\xee\x28\x05\x12\xf0\xfb\x03\x4f\x45\x57\x0b\xfb\xbe\xf5\x5f\x9e\x16\x2b\xfe\x47\x5f\xbd\x7a\x7d\xdf\x77\x6f\xf6\x1e\xe1\xe8\x63\x18\xbf\x12\x60\x4c\xfb\xb6\xb0\x2d\xfd\x98\xb4\xfc\x6f\xed\xdd\xc1\xc3\xe1\xf0\xea\x7d\x84\xd2\x49\x9d\xf3\x68\x10\x11\x6b\xa2\xba\xd5\xf5\x4b\x19\xcb\xad\xb5\x9d\x7a\xda\x68\x19\xce\x12\x2a\x97\xb9\xc8\xd1\xa7\x89\xea\xc7\x5d\xcf\xae\x00\x5f\xa6\x3c\xc2\xd4\x99\x28\xbd\x85\x4b\x64\xb0\x70\xa9\xd1\xc6\xa1\x4e\x1a\x83\x16\x06\x0e\x4b\xc0\x15\x66\x88\xe2\x49\x7e\x69\x9a\xb4\x44\xc5\xae\x1b\x1d\x53\x31\x17\x4d\xc8\x9d\xb0\x6c\x76\xbd\x9f\xc7\xf2\xd3\x9e\x57\x8c\xc0\x08\xbd\x15\x6c\xea\x18\x74\x30\x51\x30\x59\xc4\x04\xee\x17\x16\x8f\xe7\xb8\x20\xde\x1a\xef\xdf\x28\xf7\xf7\x17\x00\xed\xb3\x17\x9f\xf4\x03\x2d\xb3\x2c\xb9\x0b\xed\x7a\xcb\x9a\x26\x9d\xd4\x87\xd2\xd6\x4f\x8b\xbb\x76\x26\x2d\x09\x19\x89\x06\x1d\x3a\xd8\xb8\x24\x09\x11\xa2\x3e\xe4\x63\x60\x63\xa3\x88\x7d\x93\x10\xd7\x50\x50\xd0\x87\xe6\x3f\x2f\x96\x3e\x32\x45\x8f\x57\xc6\xc6\xa1\x4d\x0d\x13\x17\x97\x12\x1d\x71\xa7\x83\xf4\x17\xf1\x06\x11\x42\xa4\x49\x8a\xe8\x2e\x26\x0e\x2e\x3a\x35\x1c\x0c\x9e\x13\xac\xb7\x84\xea\x8c\xe0\x35\xd0\x51\x05\x93\xc1\xec\x39\xb5\x1a\x65\x26\xd0\x4f\xf2\xb4\x84\x25\x70\x01\x2e\x41\x2f\x58\x29\x65\x8b\x5a\xb1\x90\x9b\x54\xb3\x41\xfd\x96\x6d\x67\x8c\x8e\xa1\xab\xed\x9a\x31\x3b\xa8\xb3\x56\x9e\xd0\x0d\xdb\x56\xac\x5a\x7b\xc4\x13\xfe\x0f\x20\x48\x85\x12\x59\x8a\x68\x14\x29\x90\x63\x12\x95\x2c\xc1\x7f\xa0\xce\xff\xe3\xdf\x83\xc7\x7c\x70\x19\x7a\x2b\x40\xa4\xa4\x95\xbe\x7b\xb9\x9a\xfb\x44\x8d\xa7\x37\x7f\xbb\xeb\xb5\x87\xde\x68\x7e\x35\x07\x5c\xf4\x1c\xc7\x80\x10\x50\x42\x26\x82\xcc\x0d\x64\xa2\xe2\xdf\x38\xe3\x84\xb9\xc9\x38\x71\x22\x44\x89\x11\x45\x26\x46\x58\x8c\xb8\xb0\xc4\xb8\x29\x7c\x23\xc4\x88\x13\x25\x4e\x98\xa8\x18\x09\x71\xea\x79\x46\x4e\x44\x75\xfb\x62\x2a\xd7\xd5\xb5\xa5\xb5\xc4\xd4\x7b\xdb\x07\x3b\xf2\xc1\xee\xcf\x4f\x00\xb7\x0f\xc4\x3c\x08\xfd\xfe\xa5\xe0\x32\x47\x17\x0b\x07\x07\x93\x59\x94\x91\xef\xe9\xe8\xd3\x01\x12\x7d\xd2\x0f\xef\x6e\x66\x3e\x58\xb1\xf3\xef\xe6\x53\xca\xdb\x8f\x2c\xbe\x72\x55\x7c\x82\x80\xbc\xd7\xa1\x97\xa7\xf2\xc7\xee\xda\xd8\xe9\x32\xce\x1c\x77\xef\x5e\xb5\xbf\x5f\xb0\x5a\x72\x3b\x32\xdf\xb8\x31\x6f\x3c\xfb\x4c\xa3\x49\xde\x7a\xff\xfb\xec\xee\x95\xec\x9b\xcf\x7f\x71\xf8\x43\xa9\x37\xdf\xfb\xfc\xa3\xaf\x5f\xdf\x38\xbc\x73\xfd\xf1\x9d\x17\xbe\x59\x7e\x67\xe3\xef\xec\x5e\xcc\x3f\x02\x00\x00\xff\xff\x7c\xd1\xbe\x12\x83\x07\x00\x00")

func discordcanaryLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordcanaryLnk,
		"DiscordCanary.lnk",
	)
}

func discordcanaryLnk() (*asset, error) {
	bytes, err := discordcanaryLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DiscordCanary.lnk", size: 1923, mode: os.FileMode(0666), modTime: time.Unix(1709215620, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0xc, 0x3a, 0x83, 0x1a, 0x8f, 0x80, 0xb, 0x96, 0x4d, 0xb4, 0x62, 0x81, 0xaf, 0x3c, 0xdb, 0xc4, 0xdf, 0xab, 0x6a, 0xc6, 0x10, 0xe1, 0xff, 0xd, 0x2a, 0x13, 0xd6, 0xf1, 0x2b, 0x7a, 0xa2}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9b\x6d\x6f\x1c\x37\x92\x80\xbf\xfb\x57\x08\xfa\x7c\x67\xd5\x0b\x59\x2c\xe6\xaf\x2c\x16\x41\xbd\xc6\x82\x15\x4b\x27\xc9\xb9\x0b\x16\xf9\xef\x87\x71\x64\x79\xa4\x73\xb2\x07\x61\x07\xab\xe8\x9b\xd8\x6c\x75\x37\x9f\x7e\xa6\xa6\x58\xe4\xfc\xe3\xdd\xd9\xd9\xf9\xcf\xd7\xf9\xf9\xaa\xee\xce\x7f\x38\x3b\x34\xcf\xce\xce\xf3\xf2\x2e\xae\x6f\xf3\xc7\xbb\x9b\xba\xba\x8a\x0f\x15\x1f\x1f\xfb\xce\xce\xce\xfb\xf3\xd5\xd5\x51\xfb\xec\xec\xfc\xc3\xf5\xdd\xfd\x8f\xbf\xd4\xed\xdd\xe5\xf5\xa7\xf3\x1f\xce\xfe\xf6\xd8\x73\x76\x86\xff\x71\xd4\x80\xe3\x06\x6e\x7d\x6c\xfd\xfd\x5b\xc7\xc3\xd3\x1c\x5d\x4e\x8f\x3a\x6f\x2c\x3e\xda\x4f\xf5\xe3\xdd\x07\xa3\x29\xe7\x3f\x9c\x9d\xb7\x6e\x1a\xb4\x30\xca\x5c\x42\x60\xd7\xe0\x25\xb3\x75\x0f\xdf\x9c\xa3\xc0\x03\x78\xee\xb2\x1d\x1b\x6b\x36\x08\x68\x6d\x1d\x31\x70\xe4\x8c\xf3\xa3\xab\x7f\xbe\x3d\x0c\xec\xfc\xc3\xfd\xfd\xcd\xdd\x0f\x17\x17\x79\xf5\x9f\x61\x9f\xec\xf6\xd7\xf7\x0f\x40\xec\xe6\xe6\xfd\xa7\xba\xbf\xc8\xcb\xbb\xfb\xdb\xeb\x0b\xbb\xb9\xb9\xf8\xfd\x84\x8b\xff\xbe\xfc\x74\xf1\x3f\x2a\x17\xf8\x1e\xde\xe3\xd6\x8b\xff\x4b\xf0\x42\x2f\x0e\xe0\xde\xff\xfe\xbf\xe7\x0f\x37\xfd\xed\xeb\xdd\xcf\xb3\xae\xee\xed\xee\x09\xbd\x7f\x1c\xd1\xfa\x33\xc6\xcf\x28\x3f\xe3\xfc\x94\xf4\x13\xd6\xdf\xa3\xbd\x9e\x74\x7f\x87\xf7\x8a\x64\xc3\xc5\xc8\x31\x61\x27\x4e\x56\xb0\x89\x5d\x34\xc6\x40\xe2\x31\x02\xcc\xf7\xea\xed\xb4\xb1\x69\xc6\x96\x31\x32\xea\xd0\x94\x71\xfe\xe4\xfa\xa7\x26\x7e\x7b\xfd\xf3\xe3\x19\xeb\xfc\xf1\xce\xbf\x3d\xfc\xf5\xf7\x77\x47\x2f\xe1\x51\xfb\xba\xbd\x3a\x8c\xfb\xf5\x3a\xcf\xca\xd0\x2c\xe4\xb8\x12\x33\xd1\x7a\x81\xd2\x2a\xe5\xe9\x21\xba\x80\x92\x17\xbb\xe8\xf4\xe2\x14\x8c\xb4\x9d\x73\x21\xef\x8c\x31\x4a\x4e\xeb\xfc\x03\xbe\xb7\x22\x3c\x01\x8e\xf2\x72\x9f\x1d\x7b\x8a\x20\xaf\x9e\x1d\x54\x03\xa6\x40\x8c\x39\x39\xbb\x55\xf7\xf4\x85\x5c\xce\xe6\x9b\x16\x25\xe8\x04\xb4\x3d\x4f\x2d\xfc\x11\xee\x17\xd9\xfe\x73\xe5\xa5\xbd\x5e\xd7\x5b\x72\xcf\x91\xe6\xe8\x6b\x03\x09\x8d\xe5\x22\x6d\xd6\xac\x3b\x98\x40\xd4\x9d\x65\xad\x95\x60\xc3\x28\x28\xa0\x41\x22\x16\x74\xf8\xc4\xd3\xba\xfe\x05\xde\x5b\x31\xbd\x15\xba\x46\xc4\xee\x80\x4c\x6b\x0b\x53\xa0\x0c\x22\xb6\xc5\x6e\xb2\x10\x91\x62\x00\x0e\xa9\x02\x50\xe2\x1a\xaa\x13\x3b\x04\x41\xd6\xa9\x4d\x7f\x84\xfd\x32\xcf\x9f\x65\x39\xaf\xce\x74\xe7\xdc\xba\x19\xc3\x34\xb0\x69\x17\x6e\x69\x17\x36\xe3\xc2\x4c\xf0\x19\x09\x26\x5a\xd2\xd2\xde\x59\x3a\x16\x18\x4d\xee\x81\x6c\x75\x6a\xd3\x7f\xc7\xf7\x56\x5c\x97\xb4\xb9\x6c\x4f\x1b\x48\x38\x78\xc8\xc0\x35\x2a\x6b\xd6\xa2\xcd\x30\x86\xd8\x1e\x20\xd2\xd0\x5c\x43\xc6\x12\x26\x56\x47\xf0\xc5\xbe\x9a\x4f\xee\xfa\x37\xdc\x2f\xb2\xfd\xf6\x26\x5e\xaf\xe9\x96\x51\xca\x9e\xc3\x47\x8d\xc0\x0d\xac\x0b\xd3\x82\x90\x27\x72\xaa\x18\x51\x67\x6f\x65\x0d\x28\x94\x9d\xdc\x36\x67\x44\x84\x31\x83\x9f\xd6\xf4\xdb\x9b\x78\x2b\x96\xa3\x17\x47\xc5\x61\xbe\xa3\xa6\x7b\xbb\xb1\x5a\xd7\x1c\x81\x8c\xcb\x46\xa7\x37\x18\x79\x38\x1e\xba\xa3\x4a\x9b\x67\xf9\xa0\x89\x1e\xa9\xa7\xb6\xfc\x01\xf5\x8b\x0c\xff\xe5\xf2\xa7\xcb\x2b\xfb\x74\x5f\xaf\xd7\x73\x97\x85\x6b\xec\x86\x12\x8a\x29\x2b\xa2\x70\x18\x5a\x7e\x91\xdc\x6b\xe1\x00\x1a\x02\x39\x29\xba\x78\xad\x3d\xb7\x11\x34\x44\x29\x35\xc1\x69\x3d\x7f\x04\xf8\x56\x6c\x1f\x0a\x49\x61\x80\xb9\x7d\xb2\x39\x6e\x65\x23\x5c\x62\x41\x6a\x03\xba\x69\x8e\x21\x21\xd5\x5b\x63\x80\x7d\x89\xe4\x63\x6f\x6b\x9a\x93\xed\xd4\xb6\x3f\x01\xfe\x22\xe7\xef\xea\xe3\xed\xe5\xfd\xeb\x15\x9e\x67\x48\xeb\xdc\x96\x4c\xea\xa9\x03\xdd\x63\x9b\x52\x3a\xa9\xec\x4e\x5c\xb2\x21\x9c\xa6\xb3\x52\x4a\x72\xb0\x80\x19\x6e\xeb\x74\x9e\x27\x2e\xc6\x7c\xa1\xf7\x56\x6c\x87\x44\x0e\x8e\x66\x53\xb3\x22\x9f\x8a\x69\xbe\x7b\xe6\xec\xa5\xc5\xd0\x64\xc6\x66\x03\x5b\x21\xc5\x17\xcd\x39\x7c\x5b\x78\x42\x3a\xd5\xc9\x0b\x31\x8f\xb4\x5f\xa4\xfa\xe7\xfb\xcb\xab\x57\x9c\xac\x33\xa2\xac\x3d\x6a\x96\xec\xd9\x2c\xcc\xde\xb1\x38\x74\x4e\x0e\x6e\x18\x89\x7a\x88\x33\xb3\xe6\x14\xc9\x98\x58\xe4\xe9\x45\x11\x59\x35\x4f\x6c\xfa\x17\x78\x6f\x45\xf4\x45\xb6\xab\x6d\xb2\xd1\x18\xab\x34\x61\x8f\x41\x82\xa0\x45\x60\x26\x3e\x46\x32\xad\x69\xd1\x53\x86\xe3\x5a\x70\xc8\xda\x8d\x7a\x2f\xa8\x2d\xa7\x16\xfd\x11\xf6\x8b\x3c\x8f\xab\xeb\xcf\x79\xf7\xeb\xa7\x57\x9c\xae\x7b\x4b\x60\x5a\xa3\xea\x2e\x5c\x9a\x92\xe8\x6b\x76\x55\xb3\x65\xad\x36\xe2\xdc\x2b\x46\x38\x1e\xa6\x4f\x26\x9c\x02\x5d\x2c\x39\x60\x47\x9f\xd6\xf5\x47\x80\x6f\xc5\xf7\x39\xdb\x08\xd5\x3d\x7d\x67\xce\x70\xeb\x6e\x48\x85\x4a\x67\xde\xa3\xa3\xa6\xec\xb0\xdd\x53\x7d\xda\x26\x07\xd8\x69\xae\x90\x5d\x22\x78\x6a\xdf\x9f\x00\x7f\x91\xf3\x1f\xae\xaf\x5f\x71\x75\x7d\x36\x54\xd1\x24\x53\x58\xdc\x7b\x2d\x5a\x4a\xbd\x52\x01\x26\xed\x2c\x9b\xd5\xb8\xd5\x45\x1a\x9c\x1a\x23\x69\x8f\x59\x83\x83\x9a\xa9\xf5\xb4\xba\x1f\xd8\xbd\x15\xd3\x5d\xdc\x6c\x1a\x27\x09\x91\x92\x4d\xe6\xd2\x15\x30\x62\x4c\x5c\x83\x9a\xd7\xce\xcc\x82\x55\x00\x09\xd9\x0b\x5d\x44\x48\xf5\xe0\xbf\x9d\x7c\x2d\xe9\x2b\xeb\x97\xcd\x4f\xaf\x2f\xe3\xdf\x3a\x37\x45\xfc\xf3\xc2\x3a\x4f\xd5\xd6\xb1\xbb\x10\x0d\xd0\x88\x07\x0b\xe2\x0e\xcf\x6d\x1c\x16\xe1\xa0\x93\xaa\x41\x08\xad\x80\x92\x64\xf8\x06\x11\xc4\x59\xa7\x9e\x9c\x1e\xe8\x5d\x20\xfe\x35\x44\x47\xf8\x27\xa6\x27\x88\x48\xc1\x0a\x6b\xdc\xa5\xac\xa3\xb1\x03\x31\x19\xc2\x36\x6a\x05\x93\x86\x92\x24\x2c\x5a\x41\x9b\xdd\x9b\xbb\x79\xc9\x92\x01\x70\xf2\xa9\xe9\x23\xee\x63\xd7\x11\xfe\xbf\xb2\xff\x64\x3f\xd7\x6b\x4f\xd9\x21\x11\xc0\x69\xaf\x05\x29\xdd\x1d\xa8\xd5\xb9\x35\x64\x8f\xca\xf6\xd1\xbb\x1d\x67\x46\xfa\xc2\xc3\x37\xaa\xe4\xe1\xe8\x36\x1c\xb8\x57\x9e\x38\x8d\xf9\x46\xf0\xad\x44\x77\x21\xe1\x04\xa6\xec\x70\x0d\x04\xed\x4d\xc8\x00\xb8\x2a\x64\xd7\x58\xb0\x67\x54\x4f\x8e\xa5\x69\x2d\x63\x31\x1a\xb7\x75\x4d\x2a\x1e\x7e\x6a\xe7\x9f\x12\x7f\x51\x8c\xff\x78\x7b\x79\x77\xf3\x7a\x8d\x0f\x44\x8f\xde\x7b\x30\x43\x6d\xa3\x5c\x4c\x3c\xb2\x60\x5b\xcc\x81\x43\x79\x31\xd0\xdc\xdc\x62\xee\x44\xd1\xa0\xc9\xd5\xc3\x92\x5c\xf8\xc4\x2b\x4a\x5f\xe0\xbd\x15\xd9\xa7\x88\x8a\xa5\x1b\x42\x8d\x09\xa6\x61\x08\xb8\x61\x82\x2c\x47\x8b\x30\x93\xe4\x00\x5b\x5a\xb2\x37\x02\xa8\x0e\xb7\x92\xd6\x04\x88\x93\x07\xf8\x47\xd8\x2f\xf2\x3c\x2f\xef\x6e\xec\x3e\x3e\xbc\x5e\xd5\x2b\x66\x4e\xc0\x1d\x73\x40\xc7\xb4\x28\xc2\xdc\x2a\x6b\x8a\x4f\xa2\x51\xcb\x62\xe6\x48\xb1\xc1\xb3\x41\xd7\xae\x45\xb5\xc4\x17\x2d\x24\x3a\xf1\x96\x98\xaf\xfc\xde\x8a\xed\x38\xa1\x62\xaf\x09\x68\x93\x22\x26\x8a\xad\x26\x19\x60\x08\x0e\xb0\xd6\xf6\xaa\x35\x86\xeb\xe6\x55\x64\xa1\xe4\xaa\xc0\x58\x65\x20\xfb\xe4\xb5\xc7\x63\xde\x2f\x13\xbe\xee\x3e\xde\x5f\xdf\xfc\x18\xd7\xb7\xaf\x78\x7d\xa9\x7c\x2d\xdd\xf2\xa5\xf8\x32\x31\x6d\x28\x03\x0f\x1e\x6a\xba\x08\x47\x13\x8a\xac\xf2\x49\xa2\xb1\x9d\x99\x3d\x6a\x0f\x49\x38\x24\x38\x23\x4e\x5c\x84\x3c\x66\xf8\x56\xc4\x97\x60\x6b\x56\xa0\x05\x82\x3a\xd4\x9b\x46\xa9\xb8\x69\x76\x1f\xd2\xf9\xdc\xbd\x68\xbb\x0a\xa6\x11\x83\xd7\xa6\x76\x59\x3a\x4d\x40\xf1\xe4\xdb\x06\x9e\x33\x7f\x91\xfc\xd7\xbf\xd4\xed\x95\xfd\x4a\xff\x4e\xf1\xf7\x9f\x57\x24\xa3\x1b\x84\xb1\x0b\x3a\x45\x06\xb3\xf6\x70\x2d\x29\xe6\xd2\xaa\xd1\x49\x03\x46\xa9\xea\xb6\x4c\xd6\xd5\x56\x43\x99\xc1\xa4\x56\xf0\x69\xc5\xff\xca\xef\x62\xff\x35\xa4\xd7\x7f\x22\x7d\x17\x21\x49\x6e\xd6\x45\x5f\xea\x00\x90\x0e\x16\xae\x08\x93\x06\xa7\x71\xb4\xf0\x90\x6c\x57\x09\xd9\x9c\xee\xa1\xbe\xcb\x17\xe4\xc4\x93\x27\xf2\xc7\xbc\x8f\x85\xd7\x3f\x14\xfe\xdd\xc3\x6b\x78\xaa\xf5\x1f\x01\x7f\x44\xfd\x08\xf9\x2b\xde\x07\xb0\xdf\x0b\xcd\x1d\x7b\xad\x9e\xe4\x85\x6d\x5b\x64\x20\x10\x68\x4c\xf2\x39\x69\x4d\xc6\xe1\x88\xe5\x73\x80\xee\x0c\x5d\xe5\xab\x72\xef\xe8\x28\xe4\xfd\x95\xd9\xbf\x90\xd6\x33\x15\x7f\x1f\xff\x33\x05\x1f\x3f\xee\x7f\xa8\xde\x91\x76\x47\xca\xe1\x5e\xef\x9e\xa9\xf6\xdd\xe0\x99\xd3\xcb\xc7\xf6\x91\xc5\x26\x1d\x8c\x40\x2c\x41\x36\x65\x51\xe2\x04\xc4\x1a\xdc\xc9\x7b\xb8\x2c\xe7\xa5\xbb\x9a\x51\x14\xa6\xfb\xb7\xf5\xf9\x7f\x25\x95\x6f\xc2\x3c\xc4\xc7\x83\x1c\x5f\x46\x71\x7e\x5b\xff\xf5\xf9\xf2\xb6\x8e\xb7\x0e\xfe\xed\x4f\xd2\x84\x67\x51\xf4\xeb\x2e\xf2\x67\x87\x8f\x7e\x53\xf1\xdd\x15\xcf\xef\x56\x11\x0f\x8f\xf4\xee\xb7\xff\x0d\x00\x00\xff\xff\xcf\x37\xf0\xb4\xad\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12717, mode: os.FileMode(0666), modTime: time.Unix(1710907771, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0x7b, 0x54, 0x5b, 0xbf, 0xc5, 0x65, 0x60, 0xbf, 0xed, 0xe, 0x1, 0x10, 0xb, 0xde, 0x8c, 0x71, 0x79, 0x29, 0x3, 0xa4, 0xeb, 0x4a, 0x63, 0xe5, 0xd9, 0xb, 0xa3, 0x29, 0x20, 0xc8, 0xd5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DiscordCanary.lnk":  discordcanaryLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DiscordCanary.lnk": {discordcanaryLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
